From 644b6b37da0158868aaa55e342f5981a633c0147 Mon Sep 17 00:00:00 2001
From: Ivo Anjo <knuckles@gmail.com>
Date: Thu, 21 Mar 2013 14:25:10 +0000
Subject: [PATCH 1/4] Patches originais aplicadas

---
 sources/hotspot/.hg/dirstate                       |  Bin 275477 -> 275477 bytes
 .../src/cpu/x86/vm/sharedRuntime_x86_32.cpp        |  270 ++++
 .../src/cpu/x86/vm/sharedRuntime_x86_64.cpp        |  248 +++
 sources/hotspot/src/share/vm/adlc/output_h.cpp     |    1 +
 .../hotspot/src/share/vm/classfile/vmSymbols.hpp   |   10 +
 sources/hotspot/src/share/vm/code/nmethod.cpp      |    7 +
 sources/hotspot/src/share/vm/code/nmethod.hpp      |   25 +
 .../src/share/vm/compiler/compilerOracle.cpp       |    6 +
 sources/hotspot/src/share/vm/compiler/oopMap.cpp   |   10 +
 sources/hotspot/src/share/vm/compiler/oopMap.hpp   |    9 +-
 sources/hotspot/src/share/vm/includeDB_core        |    7 +
 .../hotspot/src/share/vm/oops/instanceKlass.cpp    |   24 +-
 .../hotspot/src/share/vm/oops/instanceKlass.hpp    |   13 +-
 sources/hotspot/src/share/vm/oops/methodOop.cpp    |    7 +-
 sources/hotspot/src/share/vm/oops/methodOop.hpp    |    3 +-
 sources/hotspot/src/share/vm/opto/buildOopMap.cpp  |   97 ++-
 sources/hotspot/src/share/vm/opto/machnode.hpp     |    6 +
 .../hotspot/src/share/vm/prims/nativeLookup.cpp    |    4 +
 sources/hotspot/src/share/vm/prims/unsafe.cpp      | 1658 ++++++++++++++++++++
 sources/hotspot/src/share/vm/runtime/arguments.cpp |    4 +
 .../src/share/vm/runtime/deoptimization.cpp        |    5 +
 .../src/share/vm/runtime/deoptimization.hpp        |   67 +
 sources/hotspot/src/share/vm/runtime/frame.cpp     |   15 +-
 sources/hotspot/src/share/vm/runtime/frame.hpp     |    2 +-
 sources/hotspot/src/share/vm/runtime/globals.hpp   |    6 +
 .../src/share/vm/runtime/interfaceSupport.hpp      |   27 +
 .../hotspot/src/share/vm/runtime/sharedRuntime.hpp |    7 +
 sources/hotspot/src/share/vm/runtime/thread.cpp    |    1 +
 sources/hotspot/src/share/vm/runtime/thread.hpp    |    9 +
 .../hotspot/src/share/vm/runtime/vframeArray.cpp   |  111 ++
 .../hotspot/src/share/vm/runtime/vframeArray.hpp   |   45 +
 sources/hotspot/src/share/vm/runtime/vmStructs.cpp |    2 +-
 .../src/share/vm/utilities/globalDefinitions.hpp   |    6 +
 sources/jdk/.hg/dirstate                           |  Bin 1342891 -> 1342891 bytes
 .../src/share/classes/sun/misc/Continuation.java   |  164 ++
 .../sun/misc/Continuation/ContinuationTest1.java   |  248 +++
 .../sun/misc/Continuation/ContinuationTest2.java   |   49 +
 .../sun/misc/Continuation/ContinuationTest3.java   |   63 +
 .../sun/misc/Continuation/ContinuationTest4.java   |   65 +
 .../sun/misc/Continuation/ContinuationTest5.java   |   61 +
 .../sun/misc/Continuation/ContinuationTest6.java   |   64 +
 .../sun/misc/Continuation/ContinuationTest7.java   |   50 +
 .../sun/misc/Continuation/ContinuationTest8.java   |   50 +
 .../sun/misc/Continuation/ContinuationTest9.java   |  180 +++
 .../misc/Continuation/ContinuationTestBase.java    |  225 +++
 .../test/sun/misc/Continuation/run_all_tests.sh    |   37 +
 sources/langtools/.hg/dirstate                     |  Bin 278520 -> 278520 bytes
 47 files changed, 3938 insertions(+), 30 deletions(-)
 create mode 100644 sources/jdk/src/share/classes/sun/misc/Continuation.java
 create mode 100644 sources/jdk/test/sun/misc/Continuation/ContinuationTest1.java
 create mode 100644 sources/jdk/test/sun/misc/Continuation/ContinuationTest2.java
 create mode 100644 sources/jdk/test/sun/misc/Continuation/ContinuationTest3.java
 create mode 100644 sources/jdk/test/sun/misc/Continuation/ContinuationTest4.java
 create mode 100644 sources/jdk/test/sun/misc/Continuation/ContinuationTest5.java
 create mode 100644 sources/jdk/test/sun/misc/Continuation/ContinuationTest6.java
 create mode 100644 sources/jdk/test/sun/misc/Continuation/ContinuationTest7.java
 create mode 100644 sources/jdk/test/sun/misc/Continuation/ContinuationTest8.java
 create mode 100644 sources/jdk/test/sun/misc/Continuation/ContinuationTest9.java
 create mode 100644 sources/jdk/test/sun/misc/Continuation/ContinuationTestBase.java
 create mode 100644 sources/jdk/test/sun/misc/Continuation/run_all_tests.sh

diff --git a/sources/hotspot/.hg/dirstate b/sources/hotspot/.hg/dirstate
index df4b370c50557820db74621cc5926cb163b98e91..63680355e5b015d397f4ded47f702f7a7a00adb9 100644
GIT binary patch
delta 27269
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
TkuywcT60G`A`NyncZ~UeH7Z4#

delta 24790
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

diff --git a/sources/hotspot/src/cpu/x86/vm/sharedRuntime_x86_32.cpp b/sources/hotspot/src/cpu/x86/vm/sharedRuntime_x86_32.cpp
index 847e68f..23e123e 100644
--- a/sources/hotspot/src/cpu/x86/vm/sharedRuntime_x86_32.cpp
+++ b/sources/hotspot/src/cpu/x86/vm/sharedRuntime_x86_32.cpp
@@ -31,6 +31,8 @@ UncommonTrapBlob   *SharedRuntime::_uncommon_trap_blob;
 #endif // COMPILER2
 
 DeoptimizationBlob *SharedRuntime::_deopt_blob;
+RuntimeStub*       SharedRuntime::_continuation_save_blob;
+RuntimeStub*       SharedRuntime::_continuation_resume_blob;
 SafepointBlob      *SharedRuntime::_polling_page_safepoint_handler_blob;
 SafepointBlob      *SharedRuntime::_polling_page_return_handler_blob;
 RuntimeStub*       SharedRuntime::_wrong_method_blob;
@@ -2642,6 +2644,270 @@ void SharedRuntime::generate_deopt_blob() {
   _deopt_blob->set_unpack_with_exception_in_tls_offset(exception_in_tls_offset);
 }
 
+RuntimeStub* SharedRuntime::generate_continuation_save_blob() {
+  const char* name = "continuation_save_stub";
+  ResourceMark rm;
+  CodeBuffer   buffer(name, 2048, 2048);
+  MacroAssembler* masm = new MacroAssembler(&buffer);
+  int frame_size = 0;
+
+  // This code is called like a void func(thread, sp, fp, pc, &rv_oop) from Unsafe_CutStack
+
+  // trash the (unneeded) return pc
+  __ pop(rdi);
+
+  // pop the thread
+  __ pop(rcx);
+  __ reset_last_Java_frame(rcx, false, true);
+
+  // pop arguments
+  __ pop(rdi); // sp
+  __ pop(rsi); // fp
+  __ pop(rbx); // pc
+  __ pop(rax); // &rv
+
+  // Set last Java frame
+  __ set_last_Java_frame(rcx, rdi, rsi, NULL);
+
+  // Cut to the frame
+  __ movl(rsp, rdi);
+  __ movl(rbp, rsi);
+
+  __ push(rbx); // push the cut pc as the return pc
+  __ push(rbp); // construct a dummy frame
+  __ movl(rbp, rsp);
+  __ push(rcx); // save thread ptr
+  __ push(rax); // push the address of the return value
+  __ push(rcx); // push thread ptr for the call
+
+  // Call a C function that deallocates the
+  // ThreadInVMfromNativeForContinuation object. This could block for
+  // GC.
+  __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, ThreadInVMfromNativeForContinuation::dealloc)));
+  __ addl(rsp, 4); // discard the param
+
+  __ pop(rax); // address of return value
+  __ pop(rcx); // pop the thread ptr
+  __ push(rax); // address of return value
+
+  __ movl(Address(rcx, JavaThread::thread_state_offset()), _thread_in_native_trans);
+
+  if(os::is_MP()) {
+    if (UseMembar) {
+      // Force this write out before the read below
+      __ membar(Assembler::Membar_mask_bits(
+           Assembler::LoadLoad | Assembler::LoadStore |
+           Assembler::StoreLoad | Assembler::StoreStore));
+    } else {
+      // Write serialization page so VM thread can do a pseudo remote membar.
+      // We use the current thread pointer to calculate a thread specific
+      // offset to write to within the page. This minimizes bus traffic
+      // due to cache line collision.
+      __ serialize_memory(rcx, rdx);
+    }
+  }
+
+  if (AlwaysRestoreFPU) {
+    // Make sure the control word is correct.
+    __ fldcw(ExternalAddress(StubRoutines::addr_fpu_cntrl_wrd_std()));
+  }
+
+  // check for safepoint operation in progress and/or pending suspend requests
+  { Label Continue;
+
+    __ cmp32(ExternalAddress((address)SafepointSynchronize::address_of_state()),
+             SafepointSynchronize::_not_synchronized);
+
+    Label L;
+    __ jcc(Assembler::notEqual, L);
+    __ cmpl(Address(rcx, JavaThread::suspend_flags_offset()), 0);
+    __ jcc(Assembler::equal, Continue);
+    __ bind(L);
+
+    // Don't use call_VM as it will see a possible pending exception and forward it
+    // and never return here preventing us from clearing _last_native_pc down below.
+    // Also can't use call_VM_leaf either as it will check to see if rsi & rdi are
+    // preserved and correspond to the bcp/locals pointers. So we do a runtime call
+    // by hand.
+    //
+    __ push(rcx);
+    __ push(rcx);
+    __ call(RuntimeAddress(CAST_FROM_FN_PTR(address,
+                                            JavaThread::check_special_condition_for_native_trans)));
+    __ increment(rsp, wordSize);
+    __ pop(rcx);
+
+    __ bind(Continue);
+  }
+
+  // reguard the stack ?
+
+  __ pop(rax); // address of return value
+  __ movl(rax, Address(rax, 0)); // unhandle rv
+
+  // reset handle block
+  __ movl(rdi, Address(rcx, JavaThread::active_handles_offset()));
+  __ movl(Address(rdi, JNIHandleBlock::top_offset_in_bytes()), 0);
+
+  // Compiled code leaves the floating point stack dirty, empty it.
+  __ empty_FPU_stack();
+
+  // Change the thread state to _thread_in_Java
+  __ movl(Address(rcx, JavaThread::thread_state_offset()), _thread_in_Java);
+
+  // This field must remain non-null so that GC won't check the
+  // outgoing arguments of the enter0 frame (they could be invalid oops
+  // if the frame above is a compiled frame). But now it should be
+  // nullified because GC won't happen in this blob at this point.
+  __ movl(Address(rcx, JavaThread::cont_thread_transition_offset()), NULL_WORD);
+
+  __ reset_last_Java_frame(rcx, true, true);
+
+  __ leave();  // deconstruct the frame
+  __ ret(0);   // return to the cut pc (the top frame of the resumed stack)
+
+  // -------------
+  // make sure all code is generated
+  masm->flush();
+
+  return RuntimeStub::new_runtime_stub(name, &buffer, CodeOffsets::frame_never_safe, 0, NULL, true);
+}
+
+RuntimeStub* SharedRuntime::generate_continuation_resume_blob() {
+  const char* name = "continuation_resume_stub";
+  ResourceMark rm;
+  CodeBuffer   buffer(name, 2048, 2048);
+  MacroAssembler* masm = new MacroAssembler(&buffer);
+
+  // This code is called like a void func(JavaThread* thread, ResumeBlock* rb) from Unsafe_ResumeStack0
+
+  // Pop the unneeded return pc
+  __ pop(rsi);
+
+  // Pop the thread
+  __ pop(rcx);
+  __ reset_last_Java_frame(rcx, false, true);
+
+  // Compiled code leaves the floating point stack dirty, empty it.
+  __ empty_FPU_stack();
+
+  // Pop the ResumeBlock*
+  __ pop(rdi);
+
+  // Get the image
+  __ movl(rsi, Address(rdi, ResumeBlock::top_sp_offset_in_bytes()));
+  __ movl(rax, Address(rdi, ResumeBlock::image_offset_in_bytes()));
+  __ movl(rbx, Address(rdi, ResumeBlock::image_size_offset_in_bytes()));
+  // rsi sp, rai - image, rbx - image_size
+
+  // Copy the image into the stack
+  Label resume_frames_loop;
+  __ bind(resume_frames_loop);
+  __ movl(rdx, Address(rax, 0)); // read from the image
+  __ movl(Address(rsi, 0), rdx); // write into the stack
+  __ addl(rsi, 4); // increment the pointer
+  __ addl(rax, 4); //
+  __ subl(rbx, 1); // decerement the length
+  __ jcc(Assembler::notZero, resume_frames_loop);
+
+  // Move (shift) the locals of the bottom frame
+  // rsi points to one word past the bottom here
+  Label move_bottom_frame_locals_loop;
+  Label move_bottom_frame_locals_loop_cont;
+  __ movl(rax, Address(rdi, ResumeBlock::alignment_padding_offset_in_bytes()));
+  __ movl(rbx, Address(rdi, ResumeBlock::bottom_frame_max_locals_offset_in_bytes()));
+  // Check if the padding == 0 or max_locals == 0
+  __ testl(rax, rax);
+  __ jcc(Assembler::zero, move_bottom_frame_locals_loop_cont);
+  __ testl(rbx, rbx);
+  __ jcc(Assembler::zero, move_bottom_frame_locals_loop_cont);
+
+  __ movl(rdx, rsi);
+  __ shll(rax, 2); // words -> bytes
+  __ addl(rdx, rax);
+
+  // rsi: copy dest, rdx: copy src, rbx: counter
+  // loop
+  __ bind(move_bottom_frame_locals_loop);
+  __ movl(rax, Address(rdx, 0));
+  __ movl(Address(rsi, 0), rax);
+  __ movl(Address(rdx, 0), 0xbaadbaad); // for error detection
+  __ addl(rsi, 4);
+  __ addl(rdx, 4);
+  __ subl(rbx, 1);
+  __ jcc(Assembler::notZero, move_bottom_frame_locals_loop);
+  __ bind(move_bottom_frame_locals_loop_cont);
+
+  // Set sp, fp, rv
+  __ movl(rsi, Address(rdi, ResumeBlock::top_sp_offset_in_bytes()));
+  __ movl(rbx, Address(rdi, ResumeBlock::top_fp_offset_in_bytes()));
+  __ movl(rdx, Address(rdi, ResumeBlock::top_pc_offset_in_bytes()));
+  // rax = handle of the return value
+  __ movl(rax, Address(rdi, ResumeBlock::return_value_offset_in_bytes()));
+
+  // Restore the top frame sp and fp
+  __ movl(rsp, rsi);
+  __ movl(rbp, rbx);
+
+  // Set last Java frame
+  __ set_last_Java_frame(rcx, rsi, rbx, NULL);
+  // After jumping back to the native wrapper at the end of this
+  // rountine, we could hit a safepoint. But the only pc that has an oop
+  // map in the native wrapper is the rough pc set by the native
+  // wrapper. So, we must set the last Java pc to it.
+  __ movl(rsi, Address(rdi, ResumeBlock::rough_top_pc_offset_in_bytes()));
+  __ movl(Address(rcx, JavaThread::last_Java_pc_offset()), rsi);
+
+  // The native wrapper expects to see the thread ptr preserved in rdi.
+  // Note rdi is a callee saved register in the C convention.
+  __ movl(rdi, rcx);
+
+  // push resume pc (rdx) and rv (rax) on stack to preserve across the C call.
+  __ push(rdx);
+  __ push(rax);
+  __ push(rcx); // one for each of the two calls
+  __ push(rcx);
+  // call a C function that deallocates deopt_mark
+  __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::dealloc_deopt_mark)));
+  __ addl(rsp, 4); // discard the param
+
+  __ pop(rcx); // thread ptr
+  __ pop(rax); // the handle of the return value
+  __ pop(rdx); // resume pc
+
+  __ push(rdx); // push the resume pc as the return pc
+  __ push(rbp); // construct a dummy frame
+  __ movl(rbp, rsp);
+  __ push(rax); // push the handle of the return value
+  __ push(rcx); // save the thread ptr across the call
+  __ push(rcx); // push the thread ptr for the call
+
+  // call a C function that deallocates the
+  // ThreadInVMfromNativeForContinuation object.  This could block for
+  // GC.
+  __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, ThreadInVMfromNativeForContinuation::dealloc)));
+  __ addl(rsp, 4); // discard the param
+
+  // This field must remain non-null so that GC won't check the
+  // outgoing arguments of the top frame which could be invalid
+  // oops. But now it should be nullified because GC won't happen in
+  // this blob at this point.
+  __ pop(rcx); // the thread ptr
+  __ movl(Address(rcx, JavaThread::cont_thread_transition_offset()), NULL_WORD);
+
+  // Since we're returning to native wrapper/entry, the return value
+  // should be handlized here.
+  __ pop(rax); // pop the handle of the return value
+
+  __ leave();  // deconstruct the frame
+  __ ret(0);   // return to the resume pc (the top frame of the resumed stack)
+
+  // -------------
+  // make sure all code is generated
+  masm->flush();
+
+  return RuntimeStub::new_runtime_stub(name, &buffer, CodeOffsets::frame_never_safe, 0, NULL, true);
+}
 
 #ifdef COMPILER2
 //------------------------------generate_uncommon_trap_blob--------------------
@@ -3031,7 +3297,11 @@ void SharedRuntime::generate_stubs() {
     generate_handler_blob(CAST_FROM_FN_PTR(address,
                    SafepointSynchronize::handle_polling_page_exception), true);
 
+  _continuation_save_blob = generate_continuation_save_blob();
+  _continuation_resume_blob = generate_continuation_resume_blob();
+
   generate_deopt_blob();
+
 #ifdef COMPILER2
   generate_uncommon_trap_blob();
 #endif // COMPILER2
diff --git a/sources/hotspot/src/cpu/x86/vm/sharedRuntime_x86_64.cpp b/sources/hotspot/src/cpu/x86/vm/sharedRuntime_x86_64.cpp
index 4f67963..d98cce8 100644
--- a/sources/hotspot/src/cpu/x86/vm/sharedRuntime_x86_64.cpp
+++ b/sources/hotspot/src/cpu/x86/vm/sharedRuntime_x86_64.cpp
@@ -33,6 +33,8 @@ ExceptionBlob      *OptoRuntime::_exception_blob;
 
 SafepointBlob      *SharedRuntime::_polling_page_safepoint_handler_blob;
 SafepointBlob      *SharedRuntime::_polling_page_return_handler_blob;
+RuntimeStub*       SharedRuntime::_continuation_save_blob;
+RuntimeStub*       SharedRuntime::_continuation_resume_blob;
 RuntimeStub*       SharedRuntime::_wrong_method_blob;
 RuntimeStub*       SharedRuntime::_ic_miss_blob;
 RuntimeStub*       SharedRuntime::_resolve_opt_virtual_call_blob;
@@ -2831,6 +2833,249 @@ void SharedRuntime::generate_deopt_blob() {
   _deopt_blob->set_unpack_with_exception_in_tls_offset(exception_in_tls_offset);
 }
 
+RuntimeStub* SharedRuntime::generate_continuation_save_blob() {
+  const char* name = "continuation_save_stub";
+  ResourceMark rm;
+  CodeBuffer   buffer(name, 2048, 2048);
+  MacroAssembler* masm = new MacroAssembler(&buffer);
+  int frame_size = 0;
+
+  // This code is called like a void func(thread, sp, fp, pc, &rv_oop) from Unsafe_CutStack
+  // thread on rdi
+  // sp     on rsi
+  // fp     on rdx
+  // pc     on rcx
+  // &rv_oop on r8
+
+  // pop thread
+  __ mov(r15_thread, rdi);
+  __ reset_last_Java_frame(false, true);
+
+  // trash the (unneeded) return pc
+  __ pop(rdi);
+
+  // Set last Java frame
+  __ set_last_Java_frame(rsi, rdx, NULL);
+
+  // Cut to the frame
+  __ mov(rsp, rsi);
+  __ mov(rbp, rdx);
+
+  __ push(rcx); // push the cut pc as the return pc
+  __ push(rbp); // construct a dummy frame
+  __ mov(rbp, rsp);
+  __ push(r8);         // save the address of the return value across the call
+  __ mov(rdi, r15_thread); // pass thread ptr to the call
+
+  // Call a C function that deallocates the
+  // ThreadInVMfromNativeForContinuation object. This could block for
+  // GC.
+  __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, ThreadInVMfromNativeForContinuation::dealloc)));
+  // r15_thread is callee-saved
+
+  __ movl(Address(r15_thread, JavaThread::thread_state_offset()), _thread_in_native_trans);
+
+  if(os::is_MP()) {
+    if (UseMembar) {
+      // Force this write out before the read below
+      __ membar(Assembler::Membar_mask_bits(
+           Assembler::LoadLoad | Assembler::LoadStore |
+           Assembler::StoreLoad | Assembler::StoreStore));
+    } else {
+      // Write serialization page so VM thread can do a pseudo remote membar.
+      // We use the current thread pointer to calculate a thread specific
+      // offset to write to within the page. This minimizes bus traffic
+      // due to cache line collision.
+      __ serialize_memory(r15_thread, rcx);
+    }
+  }
+
+  // check for safepoint operation in progress and/or pending suspend requests
+  {
+    Label Continue;
+
+    __ cmp32(ExternalAddress((address)SafepointSynchronize::address_of_state()),
+             SafepointSynchronize::_not_synchronized);
+
+    Label L;
+    __ jcc(Assembler::notEqual, L);
+    __ cmpl(Address(r15_thread, JavaThread::suspend_flags_offset()), 0);
+    __ jcc(Assembler::equal, Continue);
+    __ bind(L);
+
+    // Don't use call_VM as it will see a possible pending exception and forward it
+    // and never return here preventing us from clearing _last_native_pc down below.
+    // Also can't use call_VM_leaf either as it will check to see if rsi & rdi are
+    // preserved and correspond to the bcp/locals pointers. So we do a runtime call
+    // by hand.
+    //
+    __ mov(c_rarg0, r15_thread);
+    __ mov(r12, rsp); // remember sp
+    __ subptr(rsp, frame::arg_reg_save_area_bytes); // windows
+    __ andptr(rsp, -16); // align stack as required by ABI
+    __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans)));
+    __ mov(rsp, r12); // restore sp
+    __ reinit_heapbase();
+    __ bind(Continue);
+
+  }
+
+  // regard the stack ?
+
+  __ pop(r8); // restore rv
+  __ movq(rax, Address(r8, 0)); // unhandle rv
+
+  // reset handle block
+  __ movptr(rdi, Address(r15_thread, JavaThread::active_handles_offset()));
+  __ movptr(Address(rdi, JNIHandleBlock::top_offset_in_bytes()), (int32_t)NULL_WORD);
+
+  __ movl(Address(r15_thread, JavaThread::thread_state_offset()), _thread_in_Java);
+
+  // This field must remain non-null so that GC won't check the
+  // outgoing arguments of the enter0 frame (they could be invalid oops
+  // if the frame above is a compiled frame). But now it should be
+  // nullified because GC won't happen in this blob at this point.
+  __ movptr(Address(r15_thread, JavaThread::cont_thread_transition_offset()), (intptr_t) NULL_WORD);
+
+  __ reset_last_Java_frame(true, true);
+
+  __ leave();  // deconstruct the frame
+  __ ret(0);   // return to the cut pc (the top frame of the resumed stack)
+
+  // -------------
+  // make sure all code is generated
+  masm->flush();
+
+  return RuntimeStub::new_runtime_stub(name, &buffer, CodeOffsets::frame_never_safe, 0, NULL, true);
+}
+
+RuntimeStub* SharedRuntime::generate_continuation_resume_blob() {
+  const char* name = "continuation_resume_stub";
+  ResourceMark rm;
+  CodeBuffer   buffer(name, 2048, 2048);
+  MacroAssembler* masm = new MacroAssembler(&buffer);
+
+  // This code is called like a void func(JavaThread* thread, ResumeBlock* rb) from Unsafe_ResumeStack0
+  // thread on rdi
+  // rb     on rsi
+
+  // Set r15_thread
+  __ mov(r15_thread, rdi);
+  __ reset_last_Java_frame(false, true);
+
+  // Pop the unneeded return pc
+  __ pop(rdx);
+
+  // Set the ResumeBlock* in rdi
+  __ mov(rdi, rsi);
+
+  // Get the image
+  __ movq(rsi, Address(rdi, ResumeBlock::top_sp_offset_in_bytes()));
+  __ movq(rax, Address(rdi, ResumeBlock::image_offset_in_bytes()));
+  __ movq(rbx, Address(rdi, ResumeBlock::image_size_offset_in_bytes()));
+  // rsi sp, rai - image, rbx - image_size
+
+  // Copy the image into the stack
+  Label resume_frames_loop;
+  __ bind(resume_frames_loop);
+  __ movq(rdx, Address(rax, 0)); // read from the image
+  __ movq(Address(rsi, 0), rdx); // write into the stack
+  __ addq(rsi, 8); // increment the pointer
+  __ addq(rax, 8); //
+  __ subq(rbx, 1); // decerement the length
+  __ jcc(Assembler::notZero, resume_frames_loop);
+
+  // Move (shift) the locals of the bottom frame
+  // rsi points to one word past the bottom here
+  Label move_bottom_frame_locals_loop;
+  Label move_bottom_frame_locals_loop_cont;
+  __ movq(rax, Address(rdi, ResumeBlock::alignment_padding_offset_in_bytes()));
+  __ movq(rbx, Address(rdi, ResumeBlock::bottom_frame_max_locals_offset_in_bytes()));
+  // Check if the padding == 0 or max_locals == 0
+  __ testq(rax, rax);
+  __ jcc(Assembler::zero, move_bottom_frame_locals_loop_cont);
+  __ testq(rbx, rbx);
+  __ jcc(Assembler::zero, move_bottom_frame_locals_loop_cont);
+  __ mov(rdx, rsi);
+  __ shlq(rax, 3); // words -> bytes
+  __ addq(rdx, rax);
+  // rsi: copy dest, rdx: copy src, rbx: counter
+  // loop
+  __ bind(move_bottom_frame_locals_loop);
+  __ movq(rax, Address(rdx, 0));
+  __ movq(Address(rsi, 0), rax);
+  __ mov64(rax, 0xbaadbaadbaadbaad);
+  __ movq(Address(rdx, 0), rax); // for error detection
+  __ addq(rsi, 8);
+  __ addq(rdx, 8);
+  __ subq(rbx, 1);
+  __ jcc(Assembler::notZero, move_bottom_frame_locals_loop);
+  __ bind(move_bottom_frame_locals_loop_cont);
+
+  // Set sp, fp, rv
+  __ movq(rsi, Address(rdi, ResumeBlock::top_sp_offset_in_bytes()));
+  __ movq(rbx, Address(rdi, ResumeBlock::top_fp_offset_in_bytes()));
+  __ movq(rdx, Address(rdi, ResumeBlock::top_pc_offset_in_bytes()));
+  // rax = handle of the return value
+  __ movq(rax, Address(rdi, ResumeBlock::return_value_offset_in_bytes()));
+
+  // Restore the top frame sp and fp
+  __ mov(rsp, rsi);
+  __ mov(rbp, rbx);
+
+  // Set last Java frame
+  __ set_last_Java_frame(rsi, rbx, NULL);
+  // After jumping back to the native wrapper at the end of this
+  // rountine, we could hit a safepoint. But the only pc that has an oop
+  // map in the native wrapper is the rough pc set by the native
+  // wrapper. So, we must set the last Java pc to it.
+  __ movq(rsi, Address(rdi, ResumeBlock::rough_top_pc_offset_in_bytes()));
+  __ movq(Address(r15_thread, JavaThread::last_Java_pc_offset()), rsi);
+
+  // The native wrapper expects to see the thread ptr preserved in r15_thread.
+
+  // push resume pc (rdx) and rv (rax) on stack to preserve across the C call.
+  __ push(rdx);
+  __ push(rax);
+
+  __ mov(rdi, r15_thread);
+  // call a C function that deallocates deopt_mark
+  __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, Deoptimization::dealloc_deopt_mark)));
+
+  __ pop(rax); // the handle of the return value
+  __ pop(rdx); // resume pc
+
+  __ push(rdx); // push the resume pc as the return pc
+  __ push(rbp); // construct a dummy frame
+  __ mov(rbp, rsp);
+  __ push(rax); // save the handle of the return value
+
+  // call a C function that deallocates the
+  // ThreadInVMfromNativeForContinuation object.  This could block for
+  // GC.
+  __ mov(rdi, r15_thread);
+  __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, ThreadInVMfromNativeForContinuation::dealloc)));
+
+  // This field must remain non-null so that GC won't check the
+  // outgoing arguments of the top frame which could be invalid
+  // oops. But now it should be nullified because GC won't happen in
+  // this blob at this point.
+  __ movptr(Address(r15_thread, JavaThread::cont_thread_transition_offset()), (intptr_t) NULL_WORD);
+
+  // Since we're returning to native wrapper/entry, the return value
+  // should be handlized here.
+  __ pop(rax); // restore the handle of the return value
+
+  __ leave();  // deconstruct the frame
+  __ ret(0);   // return to the resume pc (the top frame of the resumed stack)
+
+  // -------------
+  // make sure all code is generated
+  masm->flush();
+
+  return RuntimeStub::new_runtime_stub(name, &buffer, CodeOffsets::frame_never_safe, 0, NULL, true);
+}
+
 #ifdef COMPILER2
 //------------------------------generate_uncommon_trap_blob--------------------
 void SharedRuntime::generate_uncommon_trap_blob() {
@@ -3194,6 +3439,9 @@ void SharedRuntime::generate_stubs() {
     generate_handler_blob(CAST_FROM_FN_PTR(address,
                    SafepointSynchronize::handle_polling_page_exception), true);
 
+  _continuation_save_blob = generate_continuation_save_blob();
+  _continuation_resume_blob = generate_continuation_resume_blob();
+
   generate_deopt_blob();
 
 #ifdef COMPILER2
diff --git a/sources/hotspot/src/share/vm/adlc/output_h.cpp b/sources/hotspot/src/share/vm/adlc/output_h.cpp
index 1bae8b1..d6ec57a 100644
--- a/sources/hotspot/src/share/vm/adlc/output_h.cpp
+++ b/sources/hotspot/src/share/vm/adlc/output_h.cpp
@@ -1909,6 +1909,7 @@ void ArchDesc::declareClasses(FILE *fp) {
     else if (instr->is_tls_instruction()) {
       // Special hack for tlsLoadP
       fprintf(fp,"  const Type            *bottom_type() const { return TypeRawPtr::BOTTOM; } // tlsLoadP\n");
+      fprintf(fp,"  bool is_tlsLoadP() const { return true; } // tlsLoadP\n");
     }
     else if ( instr->is_ideal_if() ) {
       fprintf(fp,"  const Type            *bottom_type() const { return TypeTuple::IFBOTH; } // matched IfNode\n");
diff --git a/sources/hotspot/src/share/vm/classfile/vmSymbols.hpp b/sources/hotspot/src/share/vm/classfile/vmSymbols.hpp
index e978d29..f0d725c 100644
--- a/sources/hotspot/src/share/vm/classfile/vmSymbols.hpp
+++ b/sources/hotspot/src/share/vm/classfile/vmSymbols.hpp
@@ -385,6 +385,7 @@
   template(void_signature,                            "V")                                        \
   template(byte_array_signature,                      "[B")                                       \
   template(char_array_signature,                      "[C")                                       \
+  template(long_array_signature,                      "[J")                                       \
   template(object_void_signature,                     "(Ljava/lang/Object;)V")                    \
   template(object_int_signature,                      "(Ljava/lang/Object;)I")                    \
   template(object_boolean_signature,                  "(Ljava/lang/Object;)Z")                    \
@@ -842,6 +843,15 @@
     /*== LAST_COMPILER_INLINE*/                                                                                         \
     /*the compiler does have special inlining code for these; bytecode inline is just fine */                           \
                                                                                                                         \
+                                                                                                                        \
+  /* continuation intrinsic (excluded from compilation) */                                                              \
+  do_class(sun_misc_Continuation,          "sun/misc/Continuation")                                                     \
+  do_intrinsic(_enter,                    sun_misc_Continuation,   enter_name, enter_signature,  F_S)                   \
+   do_name(     enter_name,                                       "enter")                                              \
+   do_signature(enter_signature,           "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/lang/Object;")                \
+  do_intrinsic(_enter0,                   sun_misc_Continuation,   enter0_name, enter_signature,  F_S)                  \
+   do_name(     enter0_name,                                      "enter0")                                             \
+                                                                                                                        \
   do_intrinsic(_fillInStackTrace,         java_lang_Throwable, fillInStackTrace_name, void_throwable_signature,  F_RNY) \
                                                                                                                           \
   do_intrinsic(_StringBuilder_void,   java_lang_StringBuilder, object_initializer_name, void_method_signature,     F_R)   \
diff --git a/sources/hotspot/src/share/vm/code/nmethod.cpp b/sources/hotspot/src/share/vm/code/nmethod.cpp
index 106ff2f..ca199b1 100644
--- a/sources/hotspot/src/share/vm/code/nmethod.cpp
+++ b/sources/hotspot/src/share/vm/code/nmethod.cpp
@@ -608,6 +608,7 @@ nmethod::nmethod(
     _nul_chk_table_offset    = _handler_table_offset;
     _nmethod_end_offset      = _nul_chk_table_offset;
     _compile_id              = 0;  // default
+    _cont_ref_count          = 0;
     _comp_level              = CompLevel_none;
     _entry_point             = instructions_begin();
     _verified_entry_point    = instructions_begin() + offsets->value(CodeOffsets::Verified_Entry);
@@ -785,6 +786,7 @@ nmethod::nmethod(
     _oops_do_mark_link       = NULL;
     _method                  = method;
     _compile_id              = compile_id;
+    _cont_ref_count          = 0;
     _comp_level              = comp_level;
     _entry_bci               = entry_bci;
     _osr_link                = NULL;
@@ -1146,6 +1148,11 @@ void nmethod::mark_as_seen_on_stack() {
 bool nmethod::can_not_entrant_be_converted() {
   assert(is_not_entrant(), "must be a non-entrant method");
 
+  // If some continuation includes a stack frame of this nmethod, say no.
+  if (cont_ref_count() > 0) {
+    return false;
+  }
+
   // Since the nmethod sweeper only does partial sweep the sweeper's traversal
   // count can be greater than the stack traversal count before it hits the
   // nmethod for the second time.
diff --git a/sources/hotspot/src/share/vm/code/nmethod.hpp b/sources/hotspot/src/share/vm/code/nmethod.hpp
index 28f6029..1731b66 100644
--- a/sources/hotspot/src/share/vm/code/nmethod.hpp
+++ b/sources/hotspot/src/share/vm/code/nmethod.hpp
@@ -146,6 +146,9 @@ class nmethod : public CodeBlob {
 
   AbstractCompiler* _compiler; // The compiler which compiled this nmethod
 
+  // Continuation support
+  int _cont_ref_count;                 // how many live continuations include this nmethod
+
   // Offsets for different nmethod parts
   int _exception_offset;
   // All deoptee's will resume execution at this location described by
@@ -516,6 +519,8 @@ public:
     return (addr >= instructions_begin() && addr < verified_entry_point());
   }
 
+  int orig_pc_offset() { return _orig_pc_offset; }
+
   // unlink and deallocate this nmethod
   // Only NMethodSweeper class is expected to use this. NMethodSweeper is not
   // expected to use any other private methods/data in this class.
@@ -643,6 +648,26 @@ public:
   int  compile_id() const                         { return _compile_id; }
   const char* compile_kind() const;
 
+  // Continuation support
+  int cont_ref_count() const {
+    assert(_cont_ref_count >= 0, "negative cont ref count");
+    return _cont_ref_count;
+  }
+  int inc_cont_ref_count() {
+    Atomic::inc(&_lock_count);
+    guarantee(!is_zombie(), "cannot lock a zombie method");
+
+    assert(_cont_ref_count >= 0, "negative cont ref count");
+    return ++_cont_ref_count;
+  }
+  int dec_cont_ref_count() {
+    Atomic::dec(&_lock_count);
+    guarantee(_lock_count >= 0, "unmatched nmethod lock/unlock");
+
+    assert(_cont_ref_count > 0, "negative cont ref count");
+    return --_cont_ref_count;
+  }
+
   // For debugging
   // CompiledIC*    IC_at(char* p) const;
   // PrimitiveIC*   primitiveIC_at(char* p) const;
diff --git a/sources/hotspot/src/share/vm/compiler/compilerOracle.cpp b/sources/hotspot/src/share/vm/compiler/compilerOracle.cpp
index 888f188..8fce022 100644
--- a/sources/hotspot/src/share/vm/compiler/compilerOracle.cpp
+++ b/sources/hotspot/src/share/vm/compiler/compilerOracle.cpp
@@ -277,6 +277,12 @@ bool CompilerOracle::has_option_string(methodHandle method, const char* option)
 
 bool CompilerOracle::should_exclude(methodHandle method, bool& quietly) {
   quietly = true;
+
+  // Continuation: the enter method can never be compiled
+  if (method->intrinsic_id() == vmIntrinsics::_enter
+      || method->intrinsic_id() == vmIntrinsics::_enter0)
+    return true;
+
   if (lists[ExcludeCommand] != NULL) {
     if (lists[ExcludeCommand]->match(method)) {
       quietly = _quiet;
diff --git a/sources/hotspot/src/share/vm/compiler/oopMap.cpp b/sources/hotspot/src/share/vm/compiler/oopMap.cpp
index cb8e696..c80969f 100644
--- a/sources/hotspot/src/share/vm/compiler/oopMap.cpp
+++ b/sources/hotspot/src/share/vm/compiler/oopMap.cpp
@@ -188,6 +188,13 @@ void OopMap::set_derived_oop(VMReg reg, VMReg derived_from_local_register ) {
   }
 }
 
+
+void OopMap::set_thread_ptr(VMReg reg) {
+  set_xxx(reg, OopMapValue::thread_ptr_value, VMRegImpl::Bad());
+}
+
+
+
 // OopMapSet
 
 OopMapSet::OopMapSet() {
@@ -543,6 +550,9 @@ void print_register_type(OopMapValue::oop_types x, VMReg optional,
     st->print("Derived_oop_" );
     optional->print_on(st);
     break;
+  case OopMapValue::thread_ptr_value:
+    st->print("ThreadPtr");
+    break;
   default:
     ShouldNotReachHere();
   }
diff --git a/sources/hotspot/src/share/vm/compiler/oopMap.hpp b/sources/hotspot/src/share/vm/compiler/oopMap.hpp
index c179d2b..f0062d8 100644
--- a/sources/hotspot/src/share/vm/compiler/oopMap.hpp
+++ b/sources/hotspot/src/share/vm/compiler/oopMap.hpp
@@ -29,6 +29,7 @@
 //   Dead        - Dead; can be Zapped for debugging
 //   CalleeXX    - Callee saved; also describes which caller register is saved
 //   DerivedXX   - A derived oop; original oop is described.
+//   ThreadPtr   - A current thread pointer
 //
 // OopMapValue describes a single OopMap entry
 
@@ -46,7 +47,7 @@ private:
 
 public:
   // Constants
-  enum { type_bits                = 5,
+  enum { type_bits                = 6,
          register_bits            = BitsPerShort - type_bits };
 
   enum { type_shift               = 0,
@@ -63,7 +64,8 @@ public:
          value_value = 2,
          narrowoop_value = 4,
          callee_saved_value = 8,
-         derived_oop_value= 16 };
+         derived_oop_value= 16,
+         thread_ptr_value = 32};
 
   // Constructors
   OopMapValue () { set_value(0); set_content_reg(VMRegImpl::Bad()); }
@@ -92,12 +94,14 @@ public:
   bool is_narrowoop()           { return mask_bits(value(), type_mask_in_place) == narrowoop_value; }
   bool is_callee_saved()      { return mask_bits(value(), type_mask_in_place) == callee_saved_value; }
   bool is_derived_oop()       { return mask_bits(value(), type_mask_in_place) == derived_oop_value; }
+  bool is_thread_ptr()        { return mask_bits(value(), type_mask_in_place) == thread_ptr_value; }
 
   void set_oop()              { set_value((value() & register_mask_in_place) | oop_value); }
   void set_value()            { set_value((value() & register_mask_in_place) | value_value); }
   void set_narrowoop()          { set_value((value() & register_mask_in_place) | narrowoop_value); }
   void set_callee_saved()     { set_value((value() & register_mask_in_place) | callee_saved_value); }
   void set_derived_oop()      { set_value((value() & register_mask_in_place) | derived_oop_value); }
+  void set_thread_ptr()       { set_value((value() & register_mask_in_place) | thread_ptr_value); }
 
   VMReg reg() const { return VMRegImpl::as_VMReg(mask_bits(value(), register_mask_in_place) >> register_shift); }
   oop_types type() const      { return (oop_types)mask_bits(value(), type_mask_in_place); }
@@ -177,6 +181,7 @@ class OopMap: public ResourceObj {
   void set_dead ( VMReg local);
   void set_callee_saved( VMReg local, VMReg caller_machine_register );
   void set_derived_oop ( VMReg local, VMReg derived_from_local_register );
+  void set_thread_ptr  ( VMReg local);
   void set_xxx(VMReg reg, OopMapValue::oop_types x, VMReg optional);
 
   int heap_size() const;
diff --git a/sources/hotspot/src/share/vm/includeDB_core b/sources/hotspot/src/share/vm/includeDB_core
index 709b88e..438505c 100644
--- a/sources/hotspot/src/share/vm/includeDB_core
+++ b/sources/hotspot/src/share/vm/includeDB_core
@@ -4464,7 +4464,9 @@ universe.hpp                            handles.hpp
 universe.inline.hpp                     universe.hpp
 
 unsafe.cpp                              allocation.inline.hpp
+unsafe.cpp                              biasedLocking.hpp
 unsafe.cpp                              copy.hpp
+unsafe.cpp                              deoptimization.hpp
 unsafe.cpp                              dtrace.hpp
 unsafe.cpp                              globals.hpp
 unsafe.cpp                              interfaceSupport.hpp
@@ -4475,6 +4477,10 @@ unsafe.cpp                              reflectionCompat.hpp
 unsafe.cpp                              synchronizer.hpp
 unsafe.cpp                              threadService.hpp
 unsafe.cpp                              vmSymbols.hpp
+unsafe.cpp                              oopMapCache.hpp
+unsafe.cpp                              oopFactory.hpp
+unsafe.cpp                              vframe.hpp
+unsafe.cpp                              vframeArray.hpp
 
 utf8.cpp                                utf8.hpp
 
@@ -4555,6 +4561,7 @@ vframe.hpp                              stackValue.hpp
 vframe.hpp                              stackValueCollection.hpp
 
 vframeArray.cpp                         allocation.inline.hpp
+vframeArray.cpp                         bytecode.hpp
 vframeArray.cpp                         events.hpp
 vframeArray.cpp                         handles.inline.hpp
 vframeArray.cpp                         interpreter.hpp
diff --git a/sources/hotspot/src/share/vm/oops/instanceKlass.cpp b/sources/hotspot/src/share/vm/oops/instanceKlass.cpp
index 87bbddc..cdef1b1 100644
--- a/sources/hotspot/src/share/vm/oops/instanceKlass.cpp
+++ b/sources/hotspot/src/share/vm/oops/instanceKlass.cpp
@@ -706,19 +706,20 @@ void instanceKlass::call_class_initializer_impl(instanceKlassHandle this_oop, TR
 }
 
 
-void instanceKlass::mask_for(methodHandle method, int bci,
-  InterpreterOopMap* entry_for) {
+void instanceKlass::mask_for(methodHandle method, int bci, InterpreterOopMap* entry_for,
+                             OopMapCacheId oop_map_cache_id) {
+  OopMapCache* volatile* cache = &_oop_map_caches[oop_map_cache_id];
   // Dirty read, then double-check under a lock.
-  if (_oop_map_cache == NULL) {
+  if (*cache == NULL) {
     // Otherwise, allocate a new one.
     MutexLocker x(OopMapCacheAlloc_lock);
     // First time use. Allocate a cache in C heap
-    if (_oop_map_cache == NULL) {
-      _oop_map_cache = new OopMapCache();
+    if (*cache == NULL) {
+      *cache = new OopMapCache();
     }
   }
   // _oop_map_cache is constant after init; lookup below does is own locking.
-  _oop_map_cache->lookup(method, bci, entry_for);
+  (*cache)->lookup(method, bci, entry_for);
 }
 
 
@@ -1911,10 +1912,13 @@ static void clear_all_breakpoints(methodOop m) {
 }
 
 void instanceKlass::release_C_heap_structures() {
-  // Deallocate oop map cache
-  if (_oop_map_cache != NULL) {
-    delete _oop_map_cache;
-    _oop_map_cache = NULL;
+  // Deallocate oop map caches
+  for (int i = default_oop_map_cache_id; i < limit_oop_map_cache_id; i++) {
+    OopMapCache* volatile* cache = &_oop_map_caches[i];
+    if (*cache != NULL) {
+      delete *cache;
+      *cache = NULL;
+    }
   }
 
   // Deallocate JNI identifiers for jfieldIDs
diff --git a/sources/hotspot/src/share/vm/oops/instanceKlass.hpp b/sources/hotspot/src/share/vm/oops/instanceKlass.hpp
index c25b84a..107d141 100644
--- a/sources/hotspot/src/share/vm/oops/instanceKlass.hpp
+++ b/sources/hotspot/src/share/vm/oops/instanceKlass.hpp
@@ -225,7 +225,7 @@ class instanceKlass: public Klass {
   int             _vtable_len;           // length of Java vtable (in words)
   int             _itable_len;           // length of Java itable (in words)
   ReferenceType   _reference_type;       // reference type
-  OopMapCache*    volatile _oop_map_cache;   // OopMapCache for all methods in the klass (allocated lazily)
+  OopMapCache*    volatile _oop_map_caches[limit_oop_map_cache_id]; // OopMapCache for all methods in the klass (allocated lazily).
   JNIid*          _jni_ids;              // First JNI identifier for static fields in this class
   jmethodID*      _methods_jmethod_ids;  // jmethodIDs corresponding to method_idnum, or NULL if none
   int*            _methods_cached_itable_indices;  // itable_index cache for JNI invoke corresponding to methods idnum, or NULL
@@ -569,9 +569,14 @@ class instanceKlass: public Klass {
   void set_initialization_state_and_notify(ClassState state, TRAPS);
 
   // OopMapCache support
-  OopMapCache* oop_map_cache()               { return _oop_map_cache; }
-  void set_oop_map_cache(OopMapCache *cache) { _oop_map_cache = cache; }
-  void mask_for(methodHandle method, int bci, InterpreterOopMap* entry);
+  OopMapCache* oop_map_cache(OopMapCacheId oop_map_cache_id = default_oop_map_cache_id) {
+    return _oop_map_caches[oop_map_cache_id];
+  }
+  void set_oop_map_cache(OopMapCache *cache, OopMapCacheId oop_map_cache_id = default_oop_map_cache_id) {
+    _oop_map_caches[oop_map_cache_id] = cache;
+  }
+  void mask_for(methodHandle method, int bci, InterpreterOopMap* entry,
+                OopMapCacheId oop_map_cache_id = default_oop_map_cache_id);
 
   // JNI identifier support (for static fields - for jni performance)
   JNIid* jni_ids()                               { return _jni_ids; }
diff --git a/sources/hotspot/src/share/vm/oops/methodOop.cpp b/sources/hotspot/src/share/vm/oops/methodOop.cpp
index 75a9d23..2034834 100644
--- a/sources/hotspot/src/share/vm/oops/methodOop.cpp
+++ b/sources/hotspot/src/share/vm/oops/methodOop.cpp
@@ -135,7 +135,8 @@ methodOop methodOopDesc::method_from_bcp(address bcp) {
 }
 
 
-void methodOopDesc::mask_for(int bci, InterpreterOopMap* mask) {
+void methodOopDesc::mask_for(int bci, InterpreterOopMap* mask,
+                             OopMapCacheId oop_map_cache_id) {
 
   Thread* myThread    = Thread::current();
   methodHandle h_this(myThread, this);
@@ -144,7 +145,7 @@ void methodOopDesc::mask_for(int bci, InterpreterOopMap* mask) {
                         myThread->is_ConcurrentGC_thread() ||
                         myThread->is_GC_task_thread();
 
-  if (!has_capability) {
+  if (oop_map_cache_id == default_oop_map_cache_id && !has_capability) {
     if (!VerifyStack && !VerifyLastFrame) {
       // verify stack calls this outside VM thread
       warning("oopmap should only be accessed by the "
@@ -155,7 +156,7 @@ void methodOopDesc::mask_for(int bci, InterpreterOopMap* mask) {
     }
   }
 #endif
-  instanceKlass::cast(method_holder())->mask_for(h_this, bci, mask);
+  instanceKlass::cast(method_holder())->mask_for(h_this, bci, mask, oop_map_cache_id);
   return;
 }
 
diff --git a/sources/hotspot/src/share/vm/oops/methodOop.hpp b/sources/hotspot/src/share/vm/oops/methodOop.hpp
index def8653..1a56873 100644
--- a/sources/hotspot/src/share/vm/oops/methodOop.hpp
+++ b/sources/hotspot/src/share/vm/oops/methodOop.hpp
@@ -357,7 +357,8 @@ class methodOopDesc : public oopDesc {
   void set_signature_handler(address handler);
 
   // Interpreter oopmap support
-  void mask_for(int bci, InterpreterOopMap* mask);
+  void mask_for(int bci, InterpreterOopMap* mask,
+                OopMapCacheId oop_map_cache_id = default_oop_map_cache_id);
 
 #ifndef PRODUCT
   // operations on invocation counter
diff --git a/sources/hotspot/src/share/vm/opto/buildOopMap.cpp b/sources/hotspot/src/share/vm/opto/buildOopMap.cpp
index eea0813..c5370cb 100644
--- a/sources/hotspot/src/share/vm/opto/buildOopMap.cpp
+++ b/sources/hotspot/src/share/vm/opto/buildOopMap.cpp
@@ -347,15 +347,100 @@ OopMap *OopFlow::build_oop_map( Node *n, int max_reg, PhaseRegAlloc *regalloc, i
       }
 
     } else {
-      // Other - some reaching non-oop value
-      omap->set_value( r);
+      bool is_thread_ptr = false;
+      if (def->bottom_type() == TypeRawPtr::BOTTOM) {
+        // Peek through copies
+        if (DebugContinuation) {
+          tty->print_cr("build_oop_map: Traversing for tlsLoadP...");
+        }
+#ifdef ASSERT
+        bool is_not_thread_ptr = false;
+#endif
+        Unique_Node_List worklist;
+        Unique_Node_List visited;
+        worklist.push(def);
+        while (worklist.size() > 0) {
+          Node* n = worklist.pop();
+          if (visited.member(n)) {
+            continue;
+          }
+          visited.push(n);
+
+          if (DebugContinuation) {
+            tty->print_cr("build_oop_map: Looking at %d", n->_idx);
+#ifdef ASSERT
+            n->dump();
+#endif // ASSERT
+          }
+
+          if (n->is_Mach() && n->as_Mach()->is_tlsLoadP()) {
+            is_thread_ptr = true;
+            if (DebugContinuation) {
+              tty->print_cr("build_oop_map: Found tlsLoadP ");
+            }
 #ifdef ASSERT
-      if( t->isa_rawptr() && C->cfg()->_raw_oops.member(def) ) {
-        def->dump();
-        n->dump();
-        assert(false, "there should be a oop in OopMap instead of a live raw oop at safepoint");
+            continue;
+#else
+            break;
+#endif
+          }
+
+          uint copy_in_idx = n->is_Copy();
+          if (copy_in_idx != 0) {
+            Node* copy_in = n->in(copy_in_idx);
+            worklist.push(copy_in);
+            continue;
+          }
+
+          if (n->is_Phi()) {
+            PhiNode* phi = n->as_Phi();
+            for (uint i = 1; i < phi->req(); ++i) {
+              worklist.push(phi->in(i));
+            }
+            continue;
+          }
+#ifdef ASSERT
+          is_not_thread_ptr = true;
+#else
+          break;
+#endif
+        }
+#ifdef ASSERT
+        // To conservatively check for an accidental mixup of a
+        // thread pointer and a non-thread-pointer in the compiler.
+        assert(is_thread_ptr ^ is_not_thread_ptr, "thread pointer and non-thread-pointer mixed up");
+#endif
+        if (is_thread_ptr) {
+          if (DebugContinuation) {
+            if (r->is_reg()) {
+              tty->print_cr("build_oop_map: Found a thread pointer in reg %s", r->name());
+            } else if (r->is_stack()) {
+              int stack_offset_in_bytes = r->reg2stack() * 4; // from the stack pointer
+              tty->print_cr("build_oop_map: Found a thread pointer in stack [%d]", stack_offset_in_bytes);
+              if (jvms->has_method()) {
+                tty->print_cr(" in ");
+                jvms->method()->name()->print_symbol();
+                tty->print_cr(" at bci: %d", jvms->bci());
+              }
+            } else {
+              tty->print_cr("build_oop_map: Found a thread pointer in bad VMReg");
+            }
+          }
+          assert(r->is_reg() || r->is_stack(), "thread pointer not in a reg or stack");
+          omap->set_thread_ptr(r);
+        }
       }
+      if (!is_thread_ptr) {
+        // Other - some reaching non-oop value
+        omap->set_value( r);
+#ifdef ASSERT
+        if( t->isa_rawptr() && C->cfg()->_raw_oops.member(def) ) {
+          def->dump();
+          n->dump();
+          assert(false, "there should be a oop in OopMap instead of a live raw oop at safepoint");
+        }
 #endif
+      }
     }
 
   }
diff --git a/sources/hotspot/src/share/vm/opto/machnode.hpp b/sources/hotspot/src/share/vm/opto/machnode.hpp
index d4af4a9..c490cb2 100644
--- a/sources/hotspot/src/share/vm/opto/machnode.hpp
+++ b/sources/hotspot/src/share/vm/opto/machnode.hpp
@@ -238,6 +238,12 @@ public:
   virtual const class Type *bottom_type() const { return _opnds[0]->type(); }
   virtual uint ideal_reg() const { const Type *t = _opnds[0]->type(); return t == TypeInt::CC ? Op_RegFlags : Matcher::base2reg[t->base()]; }
 
+  // tlsLoadP is the mach node that represents the (current) thread
+  // pointer. Returns true iff this node is a tlsLoadP node. Used to
+  // compute the locations of the thread pointer in the compiled code
+  // as part of the oopmap.
+  virtual bool is_tlsLoadP() const { return false; }
+
   // If this is a memory op, return the base pointer and fixed offset.
   // If there are no such, return NULL.  If there are multiple addresses
   // or the address is indeterminate (rare cases) then return (Node*)-1,
diff --git a/sources/hotspot/src/share/vm/prims/nativeLookup.cpp b/sources/hotspot/src/share/vm/prims/nativeLookup.cpp
index cef7f56..7357453 100644
--- a/sources/hotspot/src/share/vm/prims/nativeLookup.cpp
+++ b/sources/hotspot/src/share/vm/prims/nativeLookup.cpp
@@ -78,6 +78,7 @@ char* NativeLookup::long_jni_name(methodHandle method) {
 
 extern "C" {
   void JNICALL JVM_RegisterUnsafeMethods(JNIEnv *env, jclass unsafecls);
+  void JNICALL JVM_RegisterContinuationMethods(JNIEnv *env, jclass contcls);
   void JNICALL JVM_RegisterMethodHandleMethods(JNIEnv *env, jclass unsafecls);
   void JNICALL JVM_RegisterPerfMethods(JNIEnv *env, jclass perfclass);
 }
@@ -98,6 +99,9 @@ static address lookup_special_native(char* jni_name) {
   if (strstr(jni_name, "Java_sun_misc_Unsafe_registerNatives") != NULL) {
     return CAST_FROM_FN_PTR(address, JVM_RegisterUnsafeMethods);
   }
+  if (strstr(jni_name, "Java_sun_misc_Continuation_registerNatives") != NULL) {
+    return CAST_FROM_FN_PTR(address, JVM_RegisterContinuationMethods);
+  }
   if (strstr(jni_name, "Java_sun_dyn_MethodHandleNatives_registerNatives") != NULL) {
     return CAST_FROM_FN_PTR(address, JVM_RegisterMethodHandleMethods);
   }
diff --git a/sources/hotspot/src/share/vm/prims/unsafe.cpp b/sources/hotspot/src/share/vm/prims/unsafe.cpp
index 4ffea55..bfb1048 100644
--- a/sources/hotspot/src/share/vm/prims/unsafe.cpp
+++ b/sources/hotspot/src/share/vm/prims/unsafe.cpp
@@ -1169,6 +1169,1640 @@ UNSAFE_ENTRY(void, Unsafe_PrefetchWrite(JNIEnv* env, jclass ignored, jobject obj
   Prefetch::write(addr, (intx)offset);
 UNSAFE_END
 
+// Experimental Continuation Support -----------------------------------
+
+#define THROW_IE_(msg, rv) THROW_MSG_(vmSymbols::java_lang_InternalError(), msg, rv)
+#define THROW_IE(msg)      THROW_MSG( vmSymbols::java_lang_InternalError(), msg)
+
+// Writes a single stack frame
+class StackFrameWriter : public ResourceObj {
+ private:
+  Thread* _thread;
+  frame _fr;
+  GrowableArray<intptr_t>* _relocates;          // In-stack offsets of pointers within the stack
+  // Some slots hold a value at a certain offset of an oop (eg
+  // bytecode index off of a const method oop). We call those slots
+  // 'relatives'.
+  GrowableArray<intptr_t>* _relatives;          // In-stack offsets of relatives
+  GrowableArray<intptr_t>* _relatives_diff;     // Offsets of relatives off the base oop
+  GrowableArray<intptr_t>* _relatives_base_oop; // Base oops of relatives
+  GrowableArray<intptr_t>* _oop_offsets;        // In-stack offsets of oops
+  GrowableArray<oop*>*     _oop_ptrs;           // Pointers to oops, shared with StackWriter
+  GrowableArray<Handle>*   _oop_handles;        // Handles to oops, shared with StackWriter
+  GrowableArray<intptr_t>* _thread_ptrs;        // In-stack offsets of thread pointers
+  intptr_t*                _frame_image;        // The image of the stack frame
+  CompressedWriteStream*   _stream;             // Stream used to marshal the stack frame
+  intptr_t                 _alignment_padding;  // The stack alignment (0, 4, 8, or 12) for this frame
+
+  void inc_nmethod_cont_ref_count() {
+    CodeBlob* cb = CodeCache::find_blob(_fr.pc());
+    assert(cb != NULL, "Unrecognizable pc");
+    if (cb->is_nmethod()) {
+      nmethod* nm = (nmethod*) cb;
+      nm->inc_cont_ref_count();
+    }
+  }
+
+ public:
+  StackFrameWriter(Thread* thread, frame fr, CompressedWriteStream* stream,
+                   GrowableArray<oop*>* oop_ptrs,
+                   GrowableArray<Handle>* oop_handles) :
+      _thread(thread),
+      _fr(fr),
+      _stream(stream),
+      _relocates(new GrowableArray<intptr_t>()),
+      _relatives(new GrowableArray<intptr_t>()),
+      _relatives_base_oop(new GrowableArray<intptr_t>()),
+      _relatives_diff(new GrowableArray<intptr_t>()),
+      _oop_offsets(new GrowableArray<intptr_t>()),
+      _oop_ptrs(oop_ptrs),
+      _oop_handles(oop_handles),
+      _thread_ptrs(new GrowableArray<intptr_t>()),
+      _alignment_padding(0) {
+    if (fr.is_compiled_frame() || fr.is_native_frame()) {
+      inc_nmethod_cont_ref_count();
+    }
+  }
+
+  frame original_frame() { return _fr; }
+
+  bool is_in_stack(address a) {
+    return _thread->stack_base() - _thread->stack_size() <= a
+        && a < _thread->stack_base();
+  }
+
+  void add_relocate(intptr_t reloc) {
+    address loc = (address) reloc;
+    address ptr = (address) * (intptr_t*) reloc;
+    if (is_in_stack(loc) && is_in_stack(ptr)) {
+      _relocates->append(reloc);
+    }
+  }
+
+  void add_thread_pointer(intptr_t* thread_ptr_addr) {
+    _thread_ptrs->append((intptr_t) thread_ptr_addr);
+  }
+
+  // If the stack being saved is one that's been resumed before,
+  // the stack alignment padding may be inserted below the bottom frame
+  // Adjust the sender_sp and the old_fp (link) offsets of the bottom frame
+  // so that the saved stack image does not account for any padding
+  void count_past_alignment_padding() {
+    intptr_t* fp = _fr.fp();
+    intptr_t* prev_fp = _fr.link();
+    intptr_t* ptr = fp;
+    // traverse fp to prev_fp and count the number of 0xbaadbaad words
+    intptr_t padding = 0;
+    // TODO: actually up to 3 iterations are enough
+    while (ptr != prev_fp) {
+#ifndef _LP64
+      if (*ptr == (intptr_t) 0xbaadbaad) { // the magic word must match with the resume blob in sharedRuntime_x86_32
+#else
+      if (*ptr == (intptr_t) 0xbaadbaadbaadbaad) { // the magic word must match with the resume blob in sharedRuntime_x86_32
+#endif // _LP64
+        padding++;
+      }
+      ptr++;
+    }
+    if (padding > 0) {
+      _alignment_padding = padding;
+      if (DebugContinuation) {
+        tty->print_cr("count_past_alignment_padding: " INTPTR_FORMAT, padding);
+      }
+    }
+  }
+
+  void add_bcx_mdx(intptr_t* bcx, intptr_t* mdx, oop const_method, oop mdo) {
+    bool is_bci = frame::is_bci(*bcx);
+    if (!is_bci) {
+      intptr_t bcp = *bcx;
+      intptr_t diff = bcp - (intptr_t) const_method;
+      intptr_t cmo_index = _oop_handles->append(Handle(const_method));
+      _relatives->append((intptr_t) bcx);
+      _relatives_base_oop->append(cmo_index);
+      _relatives_diff->append(diff);
+      if (*mdx != 0 && mdo != NULL) {
+        // mdx is an mdp when is_bci = false and is an pointer into the middle of a methodDataOop
+        intptr_t mdp = *mdx;
+        intptr_t diff = mdp - (intptr_t) mdo;
+        assert(mdo->is_oop(), "mdo isn't an oop?");
+        intptr_t mdo_index = _oop_handles->append(Handle(mdo));
+        _relatives->append((intptr_t) mdx);
+        _relatives_base_oop->append(mdo_index);
+        _relatives_diff->append(diff);
+        if (DebugContinuation) {
+          tty->print_cr("found mdp=" INTPTR_FORMAT ", mdo=" INTPTR_FORMAT,
+                        (intptr_t)mdp, (intptr_t)mdo);
+        }
+      }
+    }
+  }
+
+  void finish() {
+    // Copy the frame memory
+    RegisterMap rmap(JavaThread::current(), false);
+    intptr_t size = _fr.frame_size(&rmap);
+    intptr_t* base = _fr.sp();
+
+    _frame_image = NEW_RESOURCE_ARRAY(intptr_t, size);
+    memcpy(_frame_image, base, size * sizeof(intptr_t));
+
+    // Update the prev fp of the bottom frame (the link in the enter0
+    // frame or the fp of the enter frame) in the copied image (not in
+    // the actual stack)
+    if (_alignment_padding != 0) {
+      intptr_t prev_fp_off = ((intptr_t) _fr.fp() - (intptr_t) _fr.sp()) / sizeof(intptr_t);
+      intptr_t sender_sp_off = (((intptr_t) _fr.fp() + frame::interpreter_frame_sender_sp_offset) - (intptr_t) _fr.sp()) / sizeof(intptr_t);
+      intptr_t* prev_fp = (intptr_t*) _frame_image[prev_fp_off];
+      intptr_t* sender_sp = (intptr_t*) _frame_image[sender_sp_off];
+      intptr_t* paddingless_prev_fp = prev_fp - _alignment_padding;
+      intptr_t* paddingless_sender_sp = sender_sp - _alignment_padding;
+      _frame_image[prev_fp_off] = (intptr_t) paddingless_prev_fp;
+      _frame_image[sender_sp_off] = (intptr_t) paddingless_sender_sp;
+      if (DebugContinuation) {
+        tty->print_cr("adjusting _alignment_padding: prev_fp " INTPTR_FORMAT " -> " INTPTR_FORMAT,
+                      (intptr_t) prev_fp, (intptr_t) paddingless_prev_fp);
+        tty->print_cr("adjusting _alignment_padding: sender_sp " INTPTR_FORMAT " -> " INTPTR_FORMAT,
+                      (intptr_t) sender_sp, (intptr_t) paddingless_sender_sp);
+      }
+    }
+
+    // Replace within-stack pointers with relative offsets and updates
+    // the relocate array with relative offsets
+    for (int i = 0; i < _relocates->length(); ++i) {
+      intptr_t off = _relocates->at(i) - (intptr_t) base;
+      intptr_t* ptr_loc = (intptr_t*)((intptr_t) _frame_image + off);
+      intptr_t* ptr = (intptr_t*)*ptr_loc;
+      *ptr_loc = ((intptr_t) ptr - (intptr_t) base) / sizeof(intptr_t);
+      _relocates->at_put(i, off/sizeof(intptr_t));
+    }
+
+    // Relatives
+    for (int i = 0; i < _relatives->length(); ++i) {
+      intptr_t off = _relatives->at(i) - (intptr_t) base;
+      _relatives->at_put(i, off / sizeof(intptr_t));
+    }
+
+    // Thread pointers
+    for (int i = 0; i < _thread_ptrs->length(); ++i) {
+      intptr_t off = _thread_ptrs->at(i) - (intptr_t) base;
+      _thread_ptrs->at_put(i, off / sizeof(intptr_t));
+    }
+
+    // Populate the oop offsets array & the oop handles array
+    // Replace oops in the frame memory with indices into the oop handles array
+    for (int k = 0; k < _oop_ptrs->length(); ++k) {
+      oop* p = _oop_ptrs->at(k);
+      intptr_t off = ((intptr_t) p - (intptr_t) base) / sizeof(intptr_t);  // offsets are in words
+      // Only if the oop is within this frame
+      if (0 <= off && off < (intptr_t) size) {
+        _oop_offsets->append(off);
+        int index = _oop_handles->find(Handle(*p));
+        assert(index >= 0, "should be found");
+        _frame_image[off] = (intptr_t) index;
+      }
+    }
+  }
+
+  void print() {
+    RegisterMap rmap(JavaThread::current(), false);
+    int frame_size = _fr.frame_size(&rmap);
+    tty->print_cr("StackFrameWriter:");
+    tty->print_cr("    type=%s",
+                  _fr.is_compiled_frame() ? "Compiled" : (_fr.is_native_frame() ? "Native" : "Interpreted"));
+    tty->print_cr("    sp=" INTPTR_FORMAT, 0);
+    tty->print_cr("    unextended_sp=" INTPTR_FORMAT, (intptr_t)_fr.unextended_sp() - (intptr_t) _fr.sp());
+    tty->print_cr("    fp=" INTPTR_FORMAT, (intptr_t) _fr.fp() - (intptr_t) _fr.sp());
+    tty->print_cr("    size_of_parameters=" INTPTR_FORMAT,
+                  _fr.is_interpreted_frame() ? (intptr_t) _fr.interpreter_frame_method()->size_of_parameters() : 0);
+    tty->print_cr("    frame_size=" INTPTR_FORMAT, frame_size);
+    tty->print_cr("    pc=" INTPTR_FORMAT, _fr.pc());
+    tty->print_cr("    relocates:");
+    for (int i = 0; i < _relocates->length(); ++i) {
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, _relocates->at(i));
+    }
+    tty->print_cr("    relatives:");
+    for (int i = 0; i < _relatives->length(); ++i) {
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, _relatives->at(i));
+    }
+    tty->print_cr("    relatives_base_oop:");
+    for (int i = 0; i < _relatives_base_oop->length(); ++i) {
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, _relatives_base_oop->at(i));
+    }
+    tty->print_cr("    relatives_diff:");
+    for (int i = 0; i < _relatives_diff->length(); ++i) {
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, _relatives_diff->at(i));
+    }
+    tty->print_cr("    oop offsets:");
+    for (int i = 0; i < _oop_offsets->length(); ++i) {
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, _oop_offsets->at(i));
+    }
+    tty->print_cr("    thread ptrs:");
+    for (int i = 0; i < _thread_ptrs->length(); ++i) {
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, _thread_ptrs->at(i));
+    }
+    tty->print_cr("    image:");
+    for (int i = 0; i < frame_size; ++i) {
+      if (_relocates->contains(i)) {
+        tty->print_cr("R       %x: " INTPTR_FORMAT, i, _frame_image[i]);
+      } else if (_oop_offsets->contains(i)) {
+        tty->print_cr("O       %x: " INTPTR_FORMAT, i, _frame_image[i]);
+      } else {
+        tty->print_cr("        %x: " INTPTR_FORMAT, i, _frame_image[i]);
+      }
+    }
+  }
+
+  void write() {
+    CompressedWriteStream* s = _stream;
+    // Encode the frame into a byte stream
+    // frame {
+    //   frame_type
+    //   sp
+    //   unextended_sp
+    //   fp
+    //   size_of_parameters (meaningful for interpreter_frame only)
+    //   frame_size
+    //   pc
+    //   nreloc
+    //   reloc[nreloc]
+    //   noops
+    //   oops[noops]
+    //   nimage
+    //   image[nimage]
+    // }
+    // Every field is a intptr_t type
+    RegisterMap rmap(JavaThread::current(), false);
+    int frame_size = _fr.frame_size(&rmap);
+#ifndef _LP64
+    s->write_int(_fr.is_compiled_frame() ? 1 : (_fr.is_native_frame() ? 2 : (_fr.is_interpreted_frame() ? 0 : -1)));
+    // Relative to sp
+    s->write_int((jint) 0);
+    s->write_int((jint) ((intptr_t) _fr.unextended_sp() - (intptr_t) _fr.sp()));
+    s->write_int((jint) ((intptr_t) _fr.fp() - (intptr_t) _fr.sp()));
+    s->write_int(_fr.is_interpreted_frame() ? (jint) _fr.interpreter_frame_method()->size_of_parameters() : 0);
+    s->write_int((jint) frame_size);
+    s->write_int((jint) _fr.pc());
+    s->write_int(_relocates->length());
+    for (int i = 0; i < _relocates->length(); ++i) {
+      s->write_int(_relocates->at(i));
+    }
+    s->write_int(_relatives->length());
+    for (int i = 0; i < _relatives->length(); ++i) {
+      s->write_int(_relatives->at(i));
+    }
+    s->write_int(_relatives_base_oop->length());
+    for (int i = 0; i < _relatives_base_oop->length(); ++i) {
+      s->write_int(_relatives_base_oop->at(i));
+    }
+    s->write_int(_relatives_diff->length());
+    for (int i = 0; i < _relatives_diff->length(); ++i) {
+      s->write_int(_relatives_diff->at(i));
+    }
+    s->write_int(_oop_offsets->length());
+    for (int i = 0; i < _oop_offsets->length(); ++i) {
+      s->write_int(_oop_offsets->at(i));
+    }
+    s->write_int(_thread_ptrs->length());
+    for (int i = 0; i < _thread_ptrs->length(); ++i) {
+      s->write_int(_thread_ptrs->at(i));
+    }
+    s->write_int(frame_size);
+    for (int i = 0; i < frame_size; ++i) {
+      s->write_int(_frame_image[i]);
+    }
+#else
+    s->write_long(_fr.is_compiled_frame() ? 1 : (_fr.is_native_frame() ? 2 : (_fr.is_interpreted_frame() ? 0 : -1)));
+    // Relative to sp
+    s->write_long((jlong) 0);
+    s->write_long((jlong) ((intptr_t) _fr.unextended_sp() - (intptr_t) _fr.sp()));
+    s->write_long((jlong) ((intptr_t) _fr.fp() - (intptr_t) _fr.sp()));
+    s->write_long(_fr.is_interpreted_frame() ? (jlong) _fr.interpreter_frame_method()->size_of_parameters() : 0);
+    s->write_long((jlong) frame_size);
+    s->write_long((jlong) _fr.pc());
+    s->write_long(_relocates->length());
+    for (int i = 0; i < _relocates->length(); ++i) {
+      s->write_long(_relocates->at(i));
+    }
+    s->write_long(_relatives->length());
+    for (int i = 0; i < _relatives->length(); ++i) {
+      s->write_long(_relatives->at(i));
+    }
+    s->write_long(_relatives_base_oop->length());
+    for (int i = 0; i < _relatives_base_oop->length(); ++i) {
+      s->write_long(_relatives_base_oop->at(i));
+    }
+    s->write_long(_relatives_diff->length());
+    for (int i = 0; i < _relatives_diff->length(); ++i) {
+      s->write_long(_relatives_diff->at(i));
+    }
+    s->write_long(_oop_offsets->length());
+    for (int i = 0; i < _oop_offsets->length(); ++i) {
+      s->write_long(_oop_offsets->at(i));
+    }
+    s->write_long(_thread_ptrs->length());
+    for (int i = 0; i < _thread_ptrs->length(); ++i) {
+      s->write_long(_thread_ptrs->at(i));
+    }
+    s->write_long(frame_size);
+    for (int i = 0; i < frame_size; ++i) {
+      s->write_long(_frame_image[i]);
+    }
+#endif
+  }
+};
+
+// Writes stack frames into the Continuation.stack object
+class StackWriter : public StackObj {
+ private:
+  GrowableArray<StackFrameWriter*>* _frameWriters;        // List of StackFrameWriters
+  StackFrameWriter*                 _currentFrameWriter;  // The current frame writer
+  Thread*                           _thread;              // The thread
+  GrowableArray<oop*>*              _oop_ptrs;            // Pointers to oops
+  GrowableArray<Handle>*            _oop_handles;         // Handles to oops
+  CompressedWriteStream             _stream;              // Stream used to marshal the stack
+
+  address                           _rough_last_frame_pc; // GC-map-bearing pc set by native wrapper
+  address                           _stack_bottom;        // End of the stack to be marshaled
+
+  // OopClosure is a StackObj
+  class OopCatcher : public OopClosure {
+   private:
+    GrowableArray<oop*>* _oop_ptrs;
+   public:
+    void set_oop_ptrs_array(GrowableArray<oop*>* oop_ptrs) {
+      _oop_ptrs = oop_ptrs;
+    }
+    void do_oop(oop* p) {
+      if (_oop_ptrs != NULL) {
+        if (DebugContinuation) {
+          tty->print_cr("OopCatcher::do_oop: " INTPTR_FORMAT ", " INTPTR_FORMAT,
+                        (intptr_t)p, (intptr_t)*p);
+        }
+        _oop_ptrs->append(p);
+      }
+    }
+    void do_oop(narrowOop* p) { ShouldNotReachHere(); }
+  };
+
+  OopCatcher _oop_catcher;
+
+  // Create the object set to Continuation.stack. It's an Object[2].
+  // The first element is the array of oops referenced by the stack.
+  // The second element is the byte array that contains the marshaled stack image.
+  objArrayHandle create_blob() {
+    objArrayHandle oopArray = write_oop_array();
+    Handle byteArray = write_byte_array();
+
+    Thread* THREAD = _thread;
+    objArrayHandle topArray;
+    {
+      objArrayOop tem = oopFactory::new_objArray(SystemDictionary::Object_klass(),
+                                                 2, CHECK_NULL);
+      topArray = objArrayHandle(_thread, tem);
+    }
+    topArray->obj_at_put(0, oopArray());
+    topArray->obj_at_put(1, byteArray());
+    return topArray;
+  }
+
+  objArrayHandle write_oop_array() {
+    Thread* THREAD = _thread;
+    // Create the object array that contains the oops
+    objArrayHandle oopArray;
+    {
+      objArrayOop tem = oopFactory::new_objArray(SystemDictionary::Object_klass(),
+                                                 _oop_handles->length(), CHECK_NULL);
+      oopArray = objArrayHandle(_thread, tem);
+    }
+    for (int i = 0; i < _oop_handles->length(); i++) {
+      oop o = _oop_handles->at(i)();
+      oopArray->obj_at_put(i, o);
+    }
+    return oopArray;
+  }
+
+  Handle write_byte_array() {
+    Thread* THREAD = _thread;
+    int size = _stream.position();
+    // Create a byte[] array to hold the compressed stream.
+    typeArrayOop ba = oopFactory::new_byteArray(size, CHECK_NH);
+    Copy::conjoint_bytes(_stream.buffer(), ba->byte_at_addr(0), size);
+    return Handle(_thread, ba);
+  }
+
+ public:
+  StackWriter(Thread* thread) :
+      _thread(thread),
+      _frameWriters(new GrowableArray<StackFrameWriter*>()),
+      _oop_ptrs(new GrowableArray<oop*>()),
+      _oop_handles(new GrowableArray<Handle>()),
+      _currentFrameWriter(NULL),
+      _stream(CompressedWriteStream(4096)) {
+    _oop_catcher.set_oop_ptrs_array(_oop_ptrs);
+  }
+
+  OopClosure* get_oop_catcher() {
+    return &_oop_catcher;
+  }
+
+  GrowableArray<oop*>* oop_ptrs() { return _oop_ptrs; }
+
+  void set_rough_last_frame_pc(address pc) { _rough_last_frame_pc = pc; }
+
+  // The end of the stack frames to be captured.
+  void set_stack_bottom(address stack_bottom) { _stack_bottom = stack_bottom; }
+
+  StackFrameWriter* writer() { return _currentFrameWriter; }
+
+  StackFrameWriter* add(frame fr) {
+    StackFrameWriter* writer = new StackFrameWriter(_thread, fr, &_stream, _oop_ptrs, _oop_handles);
+    _currentFrameWriter = writer;
+    _frameWriters->append(writer);
+    return _currentFrameWriter;
+  }
+
+  int nframes() { return _frameWriters->length(); }
+  StackFrameWriter* frame_at(int i) { return _frameWriters->at(i); }
+
+  // Creates the object set to Continuation.pcs
+  Handle getCodeCachePCs() {
+    GrowableArray<address>* pcs = new GrowableArray<address>();
+    for (int i = 0; i < _frameWriters->length(); ++i) {
+      StackFrameWriter* fw = _frameWriters->at(i);
+      frame fr = fw->original_frame();
+      if (fr.is_compiled_frame() || fr.is_native_frame()) {
+        pcs->append(fr.pc());
+      }
+    }
+    int size = pcs->length();
+    Thread* THREAD = _thread;
+    // Create a long[] array to hold the pc list.
+    typeArrayOop la = oopFactory::new_longArray(size, CHECK_NH);
+    for (int i = 0; i < size; ++i) {
+      la->long_at_put(0, (jlong) pcs->at(i));
+    }
+    return Handle(_thread, la);
+  }
+
+  objArrayHandle write() {
+    // Populate the oop handles array
+    for (int k = 0; k < _oop_ptrs->length(); ++k) {
+      oop* p = _oop_ptrs->at(k);
+      if (DebugContinuation) {
+        tty->print_cr("StackFrameWriter::write: " INTPTR_FORMAT ", " INTPTR_FORMAT,
+                      (intptr_t) p, (intptr_t) *p);
+      }
+      _oop_handles->append_if_missing(Handle(*p));
+    }
+#ifndef _LP64
+    _stream.write_int((int)_rough_last_frame_pc);
+    _stream.write_int((int)_stack_bottom);
+    _stream.write_int((int)_thread);
+    // Write the number of frames
+    _stream.write_int((int)_frameWriters->length());
+#else
+    _stream.write_long((jlong)_rough_last_frame_pc);
+    _stream.write_long((jlong)_stack_bottom);
+    _stream.write_long((jlong)_thread);
+    // Write the number of frames
+    _stream.write_long((jlong)_frameWriters->length());
+#endif // _LP64
+    // Write each frame
+    for (int i = 0; i < _frameWriters->length(); ++i) {
+      StackFrameWriter* fw = _frameWriters->at(i);
+      if (i == _frameWriters->length() - 1) {
+        // for bottom frame
+        fw->count_past_alignment_padding();
+      }
+      fw->finish();
+      fw->write();
+    }
+    objArrayHandle blob = create_blob();
+    return blob;
+  }
+
+  void print() {
+    tty->print_cr("StackWriter:");
+    tty->print_cr("    rough_last_frame_pc=" INTPTR_FORMAT, (intptr_t)_rough_last_frame_pc);
+    tty->print_cr("    oops:");
+    for (int i = 0; i < _oop_handles->length(); ++i) {
+      Handle h = _oop_handles->at(i);
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, (intptr_t) h());
+    }
+    for (int i = 0; i < _frameWriters->length(); ++i) {
+      StackFrameWriter* fw = _frameWriters->at(i);
+      fw->print();
+    }
+  }
+};
+
+// Reads a single stack frame from the Continuation.stack object
+class StackFrameReader : public ResourceObj {
+ private:
+  Thread*                  _thread;             // Thread to resume the stack onto
+  CompressedReadStream*    _stream;             // Stream used to read marshaled stack image
+  intptr_t                 _stream_limit;       // The limit of the stream
+  GrowableArray<Handle>*   _oop_arr;            // Handles to oops
+  GrowableArray<intptr_t>* _relocates;          // Relocates. See StackFrameWriter.
+  GrowableArray<intptr_t>* _relatives;          // Relatives.
+  GrowableArray<intptr_t>* _relatives_base_oop; // Base oops of relatives.
+  GrowableArray<intptr_t>* _relatives_diff;     // Offsets of relatives.
+  GrowableArray<intptr_t>* _oop_offsets;        // In-stack offsets of oops
+  GrowableArray<intptr_t>* _thread_ptrs;        // In-stack offsets of thread pointers
+  intptr_t*                _image_size;         // The size of the frame image
+  intptr_t*                _frame_image;        // The frame image
+  address                  _original_thread;    // The original thread that the stack was saved from 
+
+  intptr_t*                _sp;
+  intptr_t*                _unextended_sp;
+  intptr_t*                _fp;
+  address                  _pc;
+  intptr_t                 _size_of_parameters;
+  intptr_t                 _frame_size;
+  enum FrameType { interpreter = 0,
+                   compiled    = 1,
+                   native      = 2, }; // native wrappers
+  FrameType                _frame_type;
+
+ public:
+  StackFrameReader(Thread* thread, CompressedReadStream* stream,
+                   intptr_t stream_limit, GrowableArray<Handle>* oop_arr,
+                   intptr_t* image_size, address original_thread) :
+      _thread(thread), _stream(stream),
+      _stream_limit(stream_limit), _oop_arr(oop_arr),
+      _relocates(new GrowableArray<intptr_t>()),
+      _relatives(new GrowableArray<intptr_t>()),
+      _relatives_base_oop(new GrowableArray<intptr_t>()),
+      _relatives_diff(new GrowableArray<intptr_t>()),
+      _oop_offsets(new GrowableArray<intptr_t>()),
+      _thread_ptrs(new GrowableArray<intptr_t>()),
+      _image_size(image_size),
+      _original_thread(original_thread) {
+  }
+
+  intptr_t* frame_image() { return _frame_image; }
+  intptr_t frame_size() { return _frame_size; }
+  intptr_t* sp() { return _sp; }
+  intptr_t* unextended_sp() { return _unextended_sp; }
+  intptr_t* fp() { return _fp; }
+  address pc() { return _pc; }
+  void set_pc(address pc) { _pc = pc; }
+  intptr_t size_of_parameters() { return _size_of_parameters; }
+  bool may_deopt() { return _frame_type == compiled || _frame_type == native; }
+
+  void read() {
+    CompressedReadStream* s = _stream;
+    // See the layout in StackFrameWriter
+#ifndef _LP64
+    // 32 bit version
+    _frame_type = (FrameType) s->read_int();
+    _sp = (intptr_t*) s->read_int();
+    _unextended_sp = (intptr_t*) s->read_int();
+    _fp = (intptr_t*) s->read_int(); // if this is a compiled frame, _fp could be an oop in which case, it may not be GC-unsafe oop
+    _size_of_parameters = s->read_int();
+    _frame_size = s->read_int();
+    *_image_size = *_image_size + _frame_size;
+    _pc = (address) s->read_int();
+
+    int nrelocates = s->read_int();
+    for (int i = 0; i < nrelocates; ++i) {
+      _relocates->append((intptr_t) s->read_int());
+    }
+    int nrelatives = s->read_int();
+    for (int i = 0; i < nrelatives; ++i) {
+      _relatives->append((intptr_t) s->read_int());
+    }
+    int nrelatives_base_oop = s->read_int();
+    for (int i = 0; i < nrelatives_base_oop; ++i) {
+      _relatives_base_oop->append((intptr_t) s->read_int());
+    }
+    int nrelatives_diff = s->read_int();
+    for (int i = 0; i < nrelatives_diff; ++i) {
+      _relatives_diff->append((intptr_t) s->read_int());
+    }
+    int noop_offsets = s->read_int();
+    for (int i = 0; i < noop_offsets; ++i) {
+      _oop_offsets->append((intptr_t) s->read_int());
+    }
+    int nthread_ptrs = s->read_int();
+    for (int i = 0; i < nthread_ptrs; ++i) {
+      _thread_ptrs->append((intptr_t) s->read_int());
+    }
+    int frame_size = s->read_int();
+    assert(frame_size == _frame_size, "inconsistent frame size");
+    _frame_image = NEW_RESOURCE_ARRAY(intptr_t, frame_size);
+    for (int i = 0; i < frame_size; ++i) {
+      _frame_image[i] = s->read_int();
+    }
+#else
+    // 64 bit version.
+    _frame_type = (FrameType) s->read_long();
+    _sp = (intptr_t*) s->read_long();
+    _unextended_sp = (intptr_t*) s->read_long();
+    _fp = (intptr_t*) s->read_long(); // if this is a compiled frame, _fp could be an oop in which case, it may not be GC-unsafe oop
+    _size_of_parameters = s->read_long();
+    _frame_size = s->read_long();
+    *_image_size = *_image_size + _frame_size;
+    _pc = (address) s->read_long();
+
+    intptr_t nrelocates = s->read_long();
+    for (int i = 0; i < nrelocates; ++i) {
+      _relocates->append((intptr_t) s->read_long());
+    }
+    intptr_t nrelatives = s->read_long();
+    for (int i = 0; i < nrelatives; ++i) {
+      _relatives->append((intptr_t) s->read_long());
+    }
+    intptr_t nrelatives_base_oop = s->read_long();
+    for (int i = 0; i < nrelatives_base_oop; ++i) {
+      _relatives_base_oop->append((intptr_t) s->read_long());
+    }
+    intptr_t nrelatives_diff = s->read_long();
+    for (int i = 0; i < nrelatives_diff; ++i) {
+      _relatives_diff->append((intptr_t) s->read_long());
+    }
+    intptr_t noop_offsets = s->read_long();
+    for (int i = 0; i < noop_offsets; ++i) {
+      _oop_offsets->append((intptr_t) s->read_long());
+    }
+    intptr_t nthread_ptrs = s->read_long();
+    for (int i = 0; i < nthread_ptrs; ++i) {
+      _thread_ptrs->append((intptr_t) s->read_long());
+    }
+    intptr_t frame_size = s->read_long();
+    assert(frame_size == _frame_size, "inconsistent frame size");
+    _frame_image = NEW_RESOURCE_ARRAY(intptr_t, frame_size);
+    for (int i = 0; i < frame_size; ++i) {
+      _frame_image[i] = (intptr_t) s->read_long();
+    }
+#endif // _LP64
+  }
+
+  void print() {
+#ifndef _LP64
+    // 32 bit version
+    tty->print_cr("StackFrameReader:");
+    tty->print(   "    type=");
+    switch (_frame_type) {
+      case interpreter:
+        tty->print_cr("Interpreted");
+        break;
+      case compiled:
+        tty->print_cr("Compiled");
+        break;
+      case native:
+        tty->print_cr("Native");
+        break;
+      default:
+        ShouldNotReachHere();
+    }
+    tty->print_cr("    sp=%x", _sp);
+    tty->print_cr("    unextended_sp=%x", _unextended_sp);
+    tty->print_cr("    fp=%x", _fp);
+    tty->print_cr("    size_of_parameters=%x", _size_of_parameters);
+    tty->print_cr("    frame_size=%x", _frame_size);
+    tty->print_cr("    pc=%x", _pc);
+    tty->print_cr("    relocates:");
+    for (int i = 0; i < _relocates->length(); ++i) {
+      tty->print_cr("        [%x]=%x", i, _relocates->at(i));
+    }
+    tty->print_cr("    relatives:");
+    for (int i = 0; i < _relatives->length(); ++i) {
+      tty->print_cr("        [%x]=%x", i, _relatives->at(i));
+    }
+    tty->print_cr("    relatives_base_oop:");
+    for (int i = 0; i < _relatives_base_oop->length(); ++i) {
+      tty->print_cr("        [%x]=%x", i, _relatives_base_oop->at(i));
+    }
+    tty->print_cr("    relatives_diff:");
+    for (int i = 0; i < _relatives_diff->length(); ++i) {
+      tty->print_cr("        [%x]=%x", i, _relatives_diff->at(i));
+    }
+    tty->print_cr("    oop offsets:");
+    for (int i = 0; i < _oop_offsets->length(); ++i) {
+      tty->print_cr("        [%x]=%x", i, _oop_offsets->at(i));
+    }
+    tty->print_cr("    thread ptrs:");
+    for (int i = 0; i < _thread_ptrs->length(); ++i) {
+      tty->print_cr("        [%x]=%x", i, _thread_ptrs->at(i));
+    }
+    tty->print_cr("    image:");
+    for (int i = 0; i < _frame_size; ++i) {
+      if (_relocates->contains(i)) {
+        tty->print_cr("R       %x: %x", i, _frame_image[i]);
+      } else if (_oop_offsets->contains(i)) {
+        tty->print_cr("O       %x: %x", i, _frame_image[i]);
+      } else {
+        tty->print_cr("        %x: %x", i, _frame_image[i]);
+      }
+    }
+#else
+    // 64 bit version.
+    tty->print_cr("StackFrameReader:");
+    tty->print(   "    type=");
+    switch (_frame_type) {
+      case interpreter:
+        tty->print_cr("Interpreted");
+        break;
+      case compiled:
+        tty->print_cr("Compiled");
+        break;
+      case native:
+        tty->print_cr("Native");
+        break;
+      default:
+        ShouldNotReachHere();
+    }
+    tty->print_cr("    sp=" INTPTR_FORMAT, _sp);
+    tty->print_cr("    unextended_sp=" INTPTR_FORMAT, _unextended_sp);
+    tty->print_cr("    fp=" INTPTR_FORMAT, _fp);
+    tty->print_cr("    size_of_parameters=" INTPTR_FORMAT, _size_of_parameters);
+    tty->print_cr("    frame_size=" INTPTR_FORMAT, _frame_size);
+    tty->print_cr("    pc=" INTPTR_FORMAT, _pc);
+    tty->print_cr("    relocates:");
+    for (int i = 0; i < _relocates->length(); ++i) {
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, _relocates->at(i));
+    }
+    tty->print_cr("    relatives:");
+    for (int i = 0; i < _relatives->length(); ++i) {
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, _relatives->at(i));
+    }
+    tty->print_cr("    relatives_base_oop:");
+    for (int i = 0; i < _relatives_base_oop->length(); ++i) {
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, _relatives_base_oop->at(i));
+    }
+    tty->print_cr("    relatives_diff:");
+    for (int i = 0; i < _relatives_diff->length(); ++i) {
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, _relatives_diff->at(i));
+    }
+    tty->print_cr("    oop offsets:");
+    for (int i = 0; i < _oop_offsets->length(); ++i) {
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, _oop_offsets->at(i));
+    }
+    tty->print_cr("    thread ptrs:");
+    for (int i = 0; i < _thread_ptrs->length(); ++i) {
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, _thread_ptrs->at(i));
+    }
+    tty->print_cr("    image:");
+    for (int i = 0; i < _frame_size; ++i) {
+      if (_relocates->contains(i)) {
+        tty->print_cr("R       %x: " INTPTR_FORMAT, i, _frame_image[i]);
+      } else if (_oop_offsets->contains(i)) {
+        tty->print_cr("O       %x: " INTPTR_FORMAT, i, _frame_image[i]);
+      } else {
+        tty->print_cr("        %x: " INTPTR_FORMAT, i, _frame_image[i]);
+      }
+    }
+#endif // _LP64
+  }
+
+  // base - the base address (sp) at the destination
+  void relocate(intptr_t* base) {
+    No_Safepoint_Verifier no_safepoint;
+    // update sp, fp
+    _sp = base;
+    _unextended_sp = (intptr_t*) ((intptr_t) _unextended_sp + (intptr_t) _sp);
+    _fp = (intptr_t*) ((intptr_t) _fp + (intptr_t) _sp); // if this is a compiled frame, _fp could be an oop in which case, it may not be GC-unsafe oop
+    // update relocates
+    int reloc_len = _relocates->length();
+    for (int i = 0; i < reloc_len; ++i) {
+      intptr_t* addr = _frame_image + _relocates->at(i);
+      *addr = (intptr_t)base + *addr * sizeof(intptr_t);
+    }
+    // write oops - note safe points
+    int oop_off_len = _oop_offsets->length();
+    for (int i = 0; i < oop_off_len; ++i) {
+      intptr_t* addr = _frame_image + _oop_offsets->at(i);
+      *addr = (intptr_t) _oop_arr->at(*addr)();
+    }
+    // update relatives
+    int relative_len = _relatives->length();
+    for (int i = 0; i < relative_len; ++i) {
+      intptr_t* addr = _frame_image + _relatives->at(i);
+      intptr_t base_oop = (intptr_t)_oop_arr->at(_relatives_base_oop->at(i))();
+      *addr =  base_oop + _relatives_diff->at(i);
+    }
+
+    // Thread pointers
+    int thread_ptrs_len = _thread_ptrs->length();
+    for (int i = 0; i < thread_ptrs_len; ++i) {
+      intptr_t* addr = _frame_image + _thread_ptrs->at(i);
+      if (DebugContinuation) {
+        tty->print_cr("Writing thread pointer offset=" INTPTR_FORMAT, _thread_ptrs->at(i));
+        tty->print_cr("frame_size " INTPTR_FORMAT, _frame_size);
+        tty->print_cr("Thread pointer. Overwrote " INTPTR_FORMAT " with " INTPTR_FORMAT,
+                      (intptr_t) *addr, (intptr_t) _thread);
+      }
+      *addr = (intptr_t) _thread;
+    }
+  }
+};
+
+class StackReader : public StackObj {
+ private:
+  Thread* _thread;
+  CompressedReadStream _stream;
+  intptr_t _stream_limit;
+  GrowableArray<Handle>* _oop_arr;
+  GrowableArray<StackFrameReader*>* _frame_readers;
+  intptr_t _nframes;
+  intptr_t _image_size;
+  address _rough_last_frame_pc;
+  address _original_stack_bottom;
+  address _original_thread;
+
+ public:
+  StackReader(Thread* thread) :
+    _thread(thread),
+    _frame_readers(new GrowableArray<StackFrameReader*>()),
+    _nframes(0),
+    _stream(CompressedReadStream(NULL, 0)),
+    _stream_limit(0),
+    _image_size(0) {
+  }
+
+  address rough_last_frame_pc() { return _rough_last_frame_pc; }
+  address original_stack_bottom() { return _original_stack_bottom; }
+
+  void read(objArrayHandle arr) {
+    assert(arr->obj_at(0) != NULL, "oop array null");
+    assert(arr->obj_at(1) != NULL, "byte array null");
+    _oop_arr = new GrowableArray<Handle>();
+    objArrayHandle oops(_thread, (objArrayOop) arr->obj_at(0));
+    for (int i = 0; i < oops->length(); ++i) {
+      _oop_arr->append(Handle(_thread, oops->obj_at(i)));
+    }
+    prepare_byte_stream(Handle(_thread, arr->obj_at(1)));
+#ifndef _LP64
+    _rough_last_frame_pc = (address) _stream.read_int();
+    _original_stack_bottom = (address) _stream.read_int();
+    _original_thread = (address) _stream.read_int();
+    _nframes = _stream.read_int();
+#else
+    _rough_last_frame_pc = (address) _stream.read_long();
+    _original_stack_bottom = (address) _stream.read_long();
+    _original_thread = (address) _stream.read_long();
+    _nframes = (intptr_t) _stream.read_long();
+#endif // _LP64
+    read_frames();
+  }
+
+  void read_frames() {
+    for (int i = 0; i < _nframes; ++i) {
+      StackFrameReader* fr = new StackFrameReader(
+          _thread, &_stream, _stream_limit, _oop_arr, &_image_size, _original_thread);
+      fr->read();
+      _frame_readers->append(fr);
+    }
+  }
+
+  intptr_t nframes() { return _nframes; }
+
+  StackFrameReader* frame_at(int i) { return _frame_readers->at(i); }
+
+  void prepare_byte_stream(Handle byte_arr) {
+    typeArrayOop ba = (typeArrayOop) byte_arr();
+    _stream_limit = ba->length();
+    const int SLOP = 10;
+    u_char* buf = NEW_RESOURCE_ARRAY(u_char, _stream_limit + SLOP);
+    Copy::conjoint_bytes(ba->byte_at_addr(0), buf, _stream_limit);
+    Copy::zero_to_bytes(buf + _stream_limit, SLOP);
+    _stream = CompressedReadStream(buf, 0);
+  }
+
+  void print() {
+    tty->print_cr("StackReader:");
+    tty->print_cr("    oops:");
+    for (int i = 0; i < _oop_arr->length(); ++i) {
+      tty->print_cr("        [%x]=" INTPTR_FORMAT, i, (intptr_t) _oop_arr->at(i)());
+    }
+    for (int i = 0; i < _frame_readers->length(); ++i) {
+      StackFrameReader* fr = _frame_readers->at(i);
+      fr->print();
+    }
+  }
+
+  // Relocate the stack image.
+  //
+  // top_frame is the frame to resume frames on top of.
+  // It's the interpreted frame for enter.
+  // Note allocations in this function are under DeoptResourceMark
+  // top_frame -> enter's frame (the frame on which to resume stack)
+  // bottom_frame_max_locals (the max_locals of the bottom frame in the saved stack)
+  ResumeBlock* relocate(frame top_frame, Handle return_value, int bottom_frame_max_locals) {
+    intptr_t* limit = top_frame.sp();
+    intptr_t* base = limit - _image_size;
+
+    intptr_t alignment_padding = 0; // the number of the alignment padding in words
+
+    {
+      if (DebugContinuation) {
+        tty->print_cr("bottom_frame_max_locals %d", bottom_frame_max_locals);
+        tty->print_cr("old limit " INTPTR_FORMAT, (intptr_t) limit);
+        tty->print_cr("old base " INTPTR_FORMAT, (intptr_t) base);
+      }
+
+      // if the stack alignment does not match the original stack,
+      // add padding at the bottom and adjust the old fp/sender_sp in the bottom frame
+      // Note: enter* are always interpreted.
+      intptr_t new_bottom = (intptr_t) limit;
+      intptr_t old_bottom = (intptr_t) _original_stack_bottom;
+      intptr_t new_alignment = new_bottom & (StackAlignmentInBytes - 1);
+      intptr_t old_alignment = old_bottom & (StackAlignmentInBytes - 1);
+
+      if (DebugContinuation) {
+        tty->print_cr("old_bottom " INTPTR_FORMAT, old_bottom);
+        tty->print_cr("new_bottom " INTPTR_FORMAT, limit);
+        tty->print_cr("old_alignment " INTPTR_FORMAT, old_alignment);
+        tty->print_cr("new_alignment " INTPTR_FORMAT, new_alignment);
+      }
+
+      if (old_alignment != new_alignment) {
+        intptr_t padding = 0;
+        padding = (new_alignment + (intptr_t)(StackAlignmentInBytes) - old_alignment) & 0xf;
+        assert(padding > 0 && padding < StackAlignmentInBytes &&
+               (padding % sizeof(intptr_t) == 0), "bad padding");
+        if (DebugContinuation) {
+          tty->print_cr("padding = " INTPTR_FORMAT " (bytes)", padding);
+        }
+        intptr_t paddingInWords = padding / sizeof(intptr_t);
+        alignment_padding = paddingInWords;
+        if (DebugContinuation) {
+          tty->print_cr("old base = " INTPTR_FORMAT, (intptr_t)base);
+        }
+        // note stack grows down
+        base  -= paddingInWords;
+        limit -= paddingInWords; // though limit is dead
+        if (DebugContinuation) {
+          tty->print_cr("new base = " INTPTR_FORMAT, (intptr_t)base);
+        }
+        // adjust the old fp/sender_sp in the bottom frame
+        StackFrameReader* bottom_fr = frame_at(nframes() - 1);
+        intptr_t* btm_frame_image = bottom_fr->frame_image();
+        intptr_t btm_frame_size = bottom_fr->frame_size(); // in words
+
+#ifdef X86
+        intptr_t old_fp_index = btm_frame_size - 2 + frame::link_offset;
+        intptr_t sender_sp_index = btm_frame_size - 2 + frame::interpreter_frame_sender_sp_offset;
+        // old fp
+        if (DebugContinuation) {
+          tty->print_cr("old old_fp = " INTPTR_FORMAT, (intptr_t)btm_frame_image[old_fp_index]);
+        }
+        btm_frame_image[old_fp_index] += paddingInWords;
+        if (DebugContinuation) {
+          tty->print_cr("new old_fp = " INTPTR_FORMAT, (intptr_t)btm_frame_image[old_fp_index]);
+        }
+        // sender sp
+        if (DebugContinuation) {
+          tty->print_cr("old sender_sp = " INTPTR_FORMAT, (intptr_t)btm_frame_image[sender_sp_index]);
+        }
+        btm_frame_image[sender_sp_index] += paddingInWords;
+        if (DebugContinuation) {
+          tty->print_cr("new sender_sp = " INTPTR_FORMAT, (intptr_t)btm_frame_image[sender_sp_index]);
+        }
+#else
+        ShouldNotReachHere();
+#endif // X86
+      }
+    }
+
+    if (DebugContinuation) {
+      tty->print_cr("StackReader::relocate() limit " INTPTR_FORMAT, (intptr_t)limit);
+      tty->print_cr("StackReader::relocate() base " INTPTR_FORMAT, (intptr_t)base);
+    }
+
+    intptr_t* image = NEW_RESOURCE_ARRAY(intptr_t, _image_size);
+    intptr_t image_off = 0;
+    for (int i = 0; i < nframes(); ++i) {
+      StackFrameReader* fr = NULL;
+      int frame_size = -1;
+      fr = frame_at(i);
+      frame_size = fr->frame_size();
+      if (DebugContinuation) {
+        tty->print_cr("StackReader::relocate() relocating frame to " INTPTR_FORMAT, (intptr_t)(base + image_off));
+      }
+      fr->relocate(base + image_off);
+      memcpy(image + image_off, fr->frame_image(), frame_size * sizeof(intptr_t));
+      image_off += frame_size;
+    }
+    StackFrameReader* top_fr = frame_at(0);
+
+    // patch pc for deopt
+    // Top frame: update the pc in SFR
+    {
+      if (top_fr->may_deopt()) {
+        CodeBlob* cb = CodeCache::find_blob(top_fr->pc());
+        assert(cb != NULL, "Unrecognizable pc");
+        if (cb->is_nmethod()) {
+          nmethod* nm = (nmethod*) cb;
+          if (!nm->is_in_use() ||
+              (nm->is_osr_method() && nm->osr_entry_bci() == InvalidOSREntryBci)) // see nmethod::make_not_entrant_or_zombie for the handling of osr methods
+          {
+            address deopt_handler_pc = nm->deopt_handler_begin();
+            int orig_pc_offset = nm->orig_pc_offset();
+            if (DebugContinuation) {
+              tty->print_cr("orig_pc_offset=%d", orig_pc_offset);
+            }
+            // set original pc
+            address orig_pc_address = (address) top_fr->unextended_sp() + orig_pc_offset;
+            assert(orig_pc_address >= (address) top_fr->sp() &&
+                   orig_pc_address <= (address) (top_fr->sp() + top_fr->frame_size()), "bad orig pc address");
+            address in_image_orig_pc_address = orig_pc_address - (address)base + (address)image;
+            assert(in_image_orig_pc_address >= (address) image &&
+                   in_image_orig_pc_address < (address)(image + _image_size), "out of range of image");
+            *(address*)(in_image_orig_pc_address) = top_fr->pc();
+            if (DebugContinuation) {
+              tty->print_cr("deopt top_frame orig_pc = " INTPTR_FORMAT, (intptr_t)top_fr->pc());
+            }
+            // patch pc
+            top_fr->set_pc(deopt_handler_pc);
+            if (DebugContinuation) {
+              tty->print_cr("deopt top_frame deopt_pc = " INTPTR_FORMAT, (intptr_t)deopt_handler_pc);
+            }
+          }
+        }
+      }
+    }
+
+    // The rest: update the pc in the image
+    for (int i = 1; i < nframes(); ++i) {
+      StackFrameReader* fr = frame_at(i);
+      if (fr->may_deopt()) {
+        CodeBlob* cb = CodeCache::find_blob(fr->pc());
+        assert(cb != NULL, "Unrecognizable pc");
+        if (cb->is_nmethod()) {
+          nmethod* nm = (nmethod*) cb;
+          if (DebugContinuation) {
+            tty->print_cr("frame %d's nm=" INTPTR_FORMAT, i, (intptr_t)nm);
+          }
+          if (!nm->is_in_use() ||
+              (nm->is_osr_method() && nm->osr_entry_bci() == InvalidOSREntryBci)) // see nmethod::make_not_entrant_or_zombie for the handling of osr methods
+          {
+            address deopt_handler_pc = nm->deopt_handler_begin();
+            int orig_pc_offset = nm->orig_pc_offset();
+            if (DebugContinuation) {
+              tty->print_cr("orig_pc_offset=%d", orig_pc_offset);
+            }
+            // set original pc in the image
+            address orig_pc_address = (address) fr->unextended_sp() + orig_pc_offset;
+            assert(orig_pc_address >= (address) fr->sp() &&
+                   orig_pc_address <= (address) (fr->sp() + fr->frame_size()), "bad orig pc address");
+            address in_image_orig_pc_address = orig_pc_address - (address)base + (address)image;
+            assert(in_image_orig_pc_address >= (address) image &&
+                   in_image_orig_pc_address < (address)(image + _image_size), "out of range of image");
+            *((address*) in_image_orig_pc_address) = fr->pc();
+            if (DebugContinuation) {
+              tty->print_cr("deopt frame %d orig_pc = " INTPTR_FORMAT, i, (intptr_t)fr->pc());
+            }
+            // patch pc in the image
+            fr->set_pc(deopt_handler_pc); // this is probably useless
+#ifdef X86
+            address pc_addr = (address)(fr->sp() - 1) - (address) base + (address) image;
+            assert(pc_addr >= (address) image &&
+                   pc_addr < (address)(image + _image_size), "out of image range");
+#else
+            ShouldNotReachHere();
+#endif // X86
+            *((address*) pc_addr) = deopt_handler_pc;
+            if (DebugContinuation) {
+              tty->print_cr("deopt frame %d deopt_pc = " INTPTR_FORMAT, i, (intptr_t)deopt_handler_pc);
+            }
+          }
+        }
+      }
+    }
+
+    assert(top_fr->sp() == base, "wrong base address");
+    ResumeBlock* rb = new ResumeBlock(top_fr->sp(), top_fr->fp(), top_fr->pc(),
+                                      _rough_last_frame_pc, return_value.raw_value(),
+                                      image, _image_size, bottom_frame_max_locals,
+                                      alignment_padding);
+    return rb;
+  }
+
+};
+
+void Continuation_DecCodeCacheRefCount(JNIEnv* env, jclass contcls, jlong pc) {
+  JavaThread* thread = JavaThread::thread_from_jni_environment(env);
+  JavaThread* THREAD = thread;
+
+  if (!UseContinuation) {
+    THROW_IE("Continuation disabled");
+  }
+
+  if (DebugContinuation) {
+    tty->print_cr("DecCodeCacheRefCount called");
+  }
+
+  CodeBlob* cb = CodeCache::find_blob((address) pc);
+  if (cb != NULL && cb->is_nmethod()) {
+    nmethod* nm = (nmethod*) cb;
+    if (nm->cont_ref_count() > 0) {
+      nm->dec_cont_ref_count();
+    }
+  }
+}
+
+typedef void (*ResumeFunction)(JavaThread*, ResumeBlock*);
+
+void Continuation_ResumeContinuation(JNIEnv *env, jclass contcls, jobject stack, jobject rv)
+{
+  JavaThread* thread = JavaThread::thread_from_jni_environment(env);
+  JavaThread* THREAD = thread;
+  ResumeBlock* rb;
+  frame top_frame;
+  int bottom_frame_max_locals = 0;
+
+  if (!UseContinuation) {
+    THROW_IE("Continuation disabled");
+  }
+
+  if (DebugContinuation) {
+    tty->print_cr("ResumeContinuation thread = " INTPTR_FORMAT, (intptr_t) thread);
+  }
+  {
+    ThreadInVMfromNative threadInVM(thread);
+    if (stack == NULL)
+      THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), "stack cannot be null");
+  }
+
+  ThreadInVMfromNativeForContinuation* thread_transition = new ThreadInVMfromNativeForContinuation(thread);
+  thread->set_cont_thread_transition(thread_transition);
+
+  {
+    HandleMark hm(thread);
+
+    frame caller;
+    RegisterMap     reg_map(thread, true);
+    {
+      ResourceMark rm(thread);
+      vframe* vf = thread->last_java_vframe(&reg_map);
+      vframe* prev_vf = NULL;
+      do {
+        if (vf == NULL || !vf->is_java_frame()) {
+          ThreadInVMfromNative thread_in_vm(thread);
+          THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), "no enter call on stack or a native call above it");
+        }
+
+        javaVFrame* jvf = javaVFrame::cast(vf);
+
+        if (jvf->method() && jvf->method()->intrinsic_id() == vmIntrinsics::_enter) {
+          caller = *vf->frame_pointer();
+          bottom_frame_max_locals = prev_vf->frame_pointer()->interpreter_frame_method()->max_locals();
+          break;
+        }
+
+        prev_vf = vf;
+        vf = vf->sender();
+      } while (true);
+    } // end of ResourceMark
+
+    top_frame = caller;
+    assert(bottom_frame_max_locals >= 3, "not enough locals in enter0");
+  }
+
+  {
+    // Allocate our special deoptimization ResourceMark. We need a
+    // DeoptResourceMark here, as opposed to a normal ResourceMark, to
+    // allocate arena-based data structures in the C heap, to be able
+    // to deallocate them in a non-stack disciplined way (by an
+    // explicit call rather than implicitly at an the end of a source
+    // code-level scope), and to avoid the safepoint check (and
+    // possible GC) that happens at the decontruction of a normal
+    // ResourceMark.
+    DeoptResourceMark* dmark = new DeoptResourceMark(thread);
+    assert(thread->deopt_mark() == NULL, "Pending deopt!");
+    thread->set_deopt_mark(dmark);
+
+    GrowableArray<FrameInfo*>* frame_infos;
+    {
+      StackReader sr(thread);
+      // Deserialize the saved frames
+      sr.read(objArrayHandle(thread, (objArrayOop) JNIHandles::resolve(stack)));
+      if (DebugContinuation) {
+        sr.print();
+      }
+      Handle rvh(JNIHandles::resolve(rv));
+      rb = sr.relocate(top_frame, rvh, bottom_frame_max_locals);
+      if (DebugContinuation) {
+        sr.print();
+        rb->print();
+      }
+    }
+  }
+
+  ResumeFunction resume_func = (ResumeFunction) SharedRuntime::continuation_resume_blob()->entry_point();
+  resume_func(thread, rb);
+  return; // unreached.
+}
+
+class OopPrinter: public OopClosure {
+ private:
+  GrowableArray<oop*>* _oops;
+ public:
+  OopPrinter(GrowableArray<oop*>* oops) : _oops(oops) {
+  }
+  void do_oop(oop* p) {
+    _oops->append(p);
+    if (DebugContinuation) {
+      tty->print_cr("    oop: " INTPTR_FORMAT ": " INTPTR_FORMAT, p, *p);
+    }
+  }
+};
+
+static int lookup_field_offset(const char* klass_name,
+                               const char* field_name,
+                               symbolHandle field_signature,
+                               bool is_static,
+                               JavaThread* THREAD) {
+  symbolHandle        klass_sym   = oopFactory::new_symbol_handle(klass_name, CHECK_0);
+  instanceKlassHandle klass = SystemDictionary::resolve_or_fail(klass_sym, true, CHECK_0);
+  symbolHandle        field_sym  = oopFactory::new_symbol_handle(field_name, CHECK_0);
+  fieldDescriptor     fd;
+  if (!klass->find_local_field(field_sym(), field_signature(), &fd)
+      || (!is_static && fd.is_static())) {
+    return 0;
+  }
+  return fd.offset();
+}
+
+typedef void (*SaveFunction)(JavaThread* thread, intptr_t sp, intptr_t fp, intptr_t pc, oop* rv);
+
+jobject Continuation_SaveContinuation(JNIEnv *env, jclass contcls, jobject continuation)
+{
+  JavaThread* thread = JavaThread::thread_from_jni_environment(env);
+  JavaThread* THREAD = thread;
+
+  if (!UseContinuation) {
+    THROW_IE_("Continuation disabled", NULL);
+  }
+
+  // Bail out if any monitor is locked in the stack
+  {
+    ThreadInVMfromNative threadInVM(thread);
+    ResourceMark rm;
+    RegisterMap     reg_map(thread, true);
+    vframe* vf = thread->last_java_vframe(&reg_map);
+    int callee_params = javaVFrame::cast(vf)->method()->size_of_parameters();
+    for (; vf; vf = vf->sender()) {
+      if (vf->is_java_frame()) {
+        javaVFrame* jvf = javaVFrame::cast(vf);
+        if (jvf->method() && jvf->method()->intrinsic_id() == vmIntrinsics::_enter) {
+          break;
+        }
+        GrowableArray<MonitorInfo*>* ms = jvf->locked_monitors();
+        if (ms->length() > 0) {
+          THROW_MSG_(vmSymbols::java_lang_IllegalThreadStateException(), "a monitor is held in the continuation scope", NULL);
+          break;
+        }
+        callee_params = jvf->method()->size_of_parameters();
+      } else {
+        THROW_MSG_(vmSymbols::java_lang_IllegalThreadStateException(), "no continuation scope found", NULL);
+        break;
+      }
+    }
+  }
+
+  ThreadInVMfromNativeForContinuation* thread_transition = new ThreadInVMfromNativeForContinuation(thread);
+  thread->set_cont_thread_transition(thread_transition);
+
+  // frame to cut stack to. The frame for enter0
+  frame cut_to_frame;
+
+  // These handles need to live until the end of this function
+  Handle blob;
+  Handle pcs;
+  Handle cont;
+  Handle data1;
+  {
+    ResourceMark rm;
+    StackWriter sw(thread);
+    RegisterMap     reg_map(thread, true);
+    RegisterMap reg_map_callee(&reg_map);
+    frame caller = thread->last_frame().sender(&reg_map);
+    frame callee = thread->last_frame();
+    // This is the inaccurate pc set by native_entry/native_wrapper
+    address rough_last_frame_pc = callee.pc();
+    sw.set_rough_last_frame_pc(rough_last_frame_pc);
+    intptr_t* last_frame_sp = callee.sp();
+#ifdef X86
+    // Reread pc from the stack because the last frame may have an inaccurate pc
+    // see templateInterpreter_x86_32.cpp:914 (generate_native_entry()) and
+    // sharedRuntime_x86_32.cpp:1470 (generate_native_wrapper())
+    callee = frame(callee.sp(), callee.fp());
+    // native wrapper could leave an invalid fp. So, if it's out of range,
+    // try to set fp to sp+frame_size-2
+    RegisterMap rmap(JavaThread::current(), false);
+    int callee_frame_size = callee.frame_size(&rmap);
+    address last_frame_fp = (address) callee.fp();
+    if (last_frame_fp != (address)(callee.sp() + callee_frame_size - frame::sender_sp_offset)
+        || !(last_frame_fp <= thread->stack_base() &&
+             last_frame_fp > (address) callee.sp())) {
+      // out of range
+      intptr_t* real_fp = callee.sp() + callee_frame_size - frame::sender_sp_offset;
+      if (real_fp <= (intptr_t*)thread->stack_base() &&
+          real_fp > callee.sp()) {
+        // in range
+        callee = frame(callee.sp(), real_fp);
+      } else {
+        guarantee(false, "no valid fp found for the top frame");
+      }
+    }
+#else
+    ShouldNotReachHere();
+#endif // X86
+
+    StackFrameWriter* prev_writer = NULL;
+    StackFrameWriter* writer = sw.add(callee);
+    do {
+      if (!caller.is_java_frame()) {
+        THROW_MSG_(vmSymbols::java_lang_IllegalThreadStateException(),
+                   "no continuation scope found or there is a native frame inside the scope", 0);
+      }
+
+      if (DebugContinuation) {
+        RegisterMap rmap(JavaThread::current(), false);
+        int callee_frame_size = callee.frame_size(&rmap);
+        tty->print_cr("%s sp=" INTPTR_FORMAT ":     " INTPTR_FORMAT " (pc=" INTPTR_FORMAT ", frame_size=%d, sp+frame_size=" INTPTR_FORMAT ", unextended_sp=" INTPTR_FORMAT ", fp=" INTPTR_FORMAT ")",
+                      callee.is_interpreted_frame() ? "I" : callee.is_compiled_frame() ? "C" : "N",
+                      callee.sp(),
+                      *callee.sp(),
+                      callee.pc(),
+                      (intptr_t)callee_frame_size * sizeof(intptr_t),
+                      (intptr_t)callee.sp() + callee_frame_size * sizeof(intptr_t),
+                      callee.unextended_sp(),
+                      callee.fp());
+        for (intptr_t* p = callee.sp() + 1; p < caller.sp(); ++p) {
+          if (p == callee.fp()) {
+            tty->print_cr("  fp=" INTPTR_FORMAT ":     " INTPTR_FORMAT, p, (int)*p);
+          } else {
+            tty->print_cr("     " INTPTR_FORMAT ":     " INTPTR_FORMAT, p, (int)*p);
+          }
+        }
+      }
+
+      // Need to temporarily change the pc to the rough pc set by
+      // native_wrapper in the last frame so that the OopMap is found
+      // during the oops_do call.
+      address org_pc = NULL;
+      if (last_frame_sp == callee.sp()) {
+        org_pc = callee.pc();
+        callee.set_pc(rough_last_frame_pc);
+      }
+
+      if (callee.is_interpreted_frame()) {
+        // Both GC and this code walk down the stacks and need
+        // interpreter oop maps.  Because oop maps has a mutex lock,
+        // only one of the two use them at the same time and can cause
+        // deadlocks. Use the 2nd oop map cache to avoid the
+        // deadlock with GC.
+        callee.oops_interpreted_do(sw.get_oop_catcher(), &reg_map_callee, true, continuation_oop_map_cache_id);
+      } else {
+        callee.oops_do(sw.get_oop_catcher(), NULL, &reg_map_callee);
+      }
+
+      // Thread pointer map in c2 compiled frames
+      if (callee.is_compiled_frame()) {
+        CodeBlob* cb = callee.cb();
+        assert(cb != NULL, "no codeblob found");
+        OopMapSet* maps = cb->oop_maps();
+        OopMap* map = cb->oop_map_for_return_address(callee.pc());
+        assert(map != NULL, "no oop map found");
+        if (DebugContinuation) {
+          tty->print_cr("Current thread pointer " INTPTR_FORMAT, (intptr_t) thread);
+        }
+        OopMapValue omv;
+        {
+          for (OopMapStream oms(map, OopMapValue::thread_ptr_value); !oms.is_done(); oms.next()) {
+            omv = oms.current();
+            assert(omv.is_thread_ptr(), "not a OopMapValue::thread_ptr_value");
+            VMReg reg = omv.reg();
+            assert(reg->is_reg() || reg->is_stack(), "A VMReg is neither a reg or stack");
+            if (reg->is_reg()) {
+#ifndef X86
+              ShouldNotReachHere();
+#endif // X86
+              if (DebugContinuation) {
+                tty->print("Found a reg VMReg containing a thread pointer. ");
+                reg->print_on(tty);
+                tty->cr();
+              }
+              if (strcmp("ebp", reg->name()) == 0 || strcmp("rbp", reg->name()) == 0) {
+                assert(prev_writer != NULL, "prev_writer cannot be NULL");
+                frame prev_frame = prev_writer->original_frame();
+                intptr_t* thread_ptr_addr = NULL;
+                if (prev_frame.is_compiled_frame()) {
+                  thread_ptr_addr = callee.sp() - frame::sender_sp_offset;
+                } else {
+                  thread_ptr_addr = prev_frame.fp();
+                }
+                prev_writer->add_thread_pointer(thread_ptr_addr);
+              } else {
+                guarantee(false, "Found a reg VMReg containing a thread pointer.");
+              }
+            } else if (reg->is_stack()) {
+              int stack_offset_in_bytes = reg->reg2stack() * 4; // based off of the unextended sp. 4 bytes even on 64 bit.
+              int stack_offset_in_words = stack_offset_in_bytes / sizeof(intptr_t);
+              intptr_t* thread_ptr_addr = &callee.unextended_sp()[stack_offset_in_words];
+              intptr_t thread_ptr = *thread_ptr_addr;
+              if (DebugContinuation) {
+                tty->print_cr("Found thread pointer " INTPTR_FORMAT " in a compiled frame.",
+                              thread_ptr);
+              }
+              writer->add_thread_pointer(thread_ptr_addr);
+            }
+          }
+        }
+      }
+
+      if (last_frame_sp == callee.sp()) {
+        callee.set_pc(org_pc); // set it back to the original
+      }
+
+      // Find pointers within the stack (eg sp, fp)
+      if (callee.is_interpreted_frame()) {
+#ifndef X86
+        ShouldNotReachHere();
+#endif // X86
+        writer->add_relocate((intptr_t) &callee.fp()[frame::interpreter_frame_sender_sp_offset]);
+        writer->add_relocate((intptr_t) &callee.fp()[frame::interpreter_frame_last_sp_offset]);
+        writer->add_relocate((intptr_t) &callee.fp()[frame::interpreter_frame_monitor_block_top_offset]);
+        writer->add_relocate((intptr_t) &callee.fp()[frame::interpreter_frame_locals_offset]);
+
+        intptr_t* bcx = &callee.fp()[frame::interpreter_frame_bcx_offset];
+        intptr_t* mdx = &callee.fp()[frame::interpreter_frame_mdx_offset];
+        // Note unsafe oop here
+        constMethodOop const_method = callee.interpreter_frame_method()->constMethod();
+        methodDataOop mdo = callee.interpreter_frame_method()->method_data();
+        writer->add_bcx_mdx(bcx, mdx, const_method, mdo);
+
+        if (caller.is_interpreted_frame()) {
+          writer->add_relocate((intptr_t) callee.fp());
+          if (DebugContinuation) {
+            tty->print_cr("    relocates: " INTPTR_FORMAT, (intptr_t) callee.fp());
+          }
+        } else if (caller.is_compiled_frame()) {
+#ifdef COMPILER2
+          // nothing because fp is a plain callee saved reg
+#elif COMPILER1
+          intptr_t* fp = caller.sp() - frame::sender_sp_offset;
+          writer->add_relocate((intptr_t) fp);
+          if (DebugContinuation) {
+            tty->print_cr("    relocates: %x", (intptr_t) fp);
+          }
+#else
+          ShouldNotReachHere();
+#endif // COMPILER1/2
+        } else {
+          ShouldNotReachHere();
+        }
+      } else if (callee.is_compiled_frame()) {
+        if (caller.is_interpreted_frame()) {
+          intptr_t* fp = caller.sp() - frame::sender_sp_offset;
+          writer->add_relocate((intptr_t) fp);
+          if (DebugContinuation) {
+            tty->print_cr("    relocates: " INTPTR_FORMAT, (intptr_t) fp);
+          }
+        } else if (caller.is_compiled_frame()) {
+#ifdef COMPILER2
+          // nothing because fp is a plain callee saved reg
+#elif COMPILER1
+          intptr_t* fp = caller.sp() - frame::sender_sp_offset;
+          writer->add_relocate((intptr_t) fp);
+          if (DebugContinuation) {
+            tty->print_cr("    relocates: " INTPTR_FORMAT, (intptr_t) fp);
+          }
+#else
+          ShouldNotReachHere();
+#endif // COMPILER1/2
+        } else {
+          ShouldNotReachHere();
+        }
+      } else if (callee.is_native_frame()) {
+        // this is for the second frame to the top native_wrapper frame call.
+        if (caller.is_interpreted_frame()) {
+          intptr_t* fp = caller.sp() - frame::sender_sp_offset;
+          writer->add_relocate((intptr_t) fp);
+          if (DebugContinuation) {
+            tty->print_cr("    relocates: " INTPTR_FORMAT, (intptr_t) fp);
+          }
+        } else if (caller.is_compiled_frame()) {
+#ifdef COMPILER2
+          // nothing because fp is a plain callee saved reg
+#elif COMPILER1
+          intptr_t* fp = caller.sp() - frame::sender_sp_offset;
+          writer->add_relocate((intptr_t) fp);
+          if (DebugContinuation) {
+            tty->print_cr("    relocates: " INTPTR_FORMAT, (intptr_t) fp);
+          }
+#else
+          ShouldNotReachHere();
+#endif // COMPILER1/2
+        } else {
+          ShouldNotReachHere();
+        }
+      } else {
+        if (DebugContinuation) {
+          tty->print_cr("callee.is_native = %d", callee.is_native_frame());
+          tty->print_cr("caller.is_interpreted = %d", caller.is_interpreted_frame());
+          tty->print_cr("caller.is_compiled = %d", caller.is_compiled_frame());
+          tty->print_cr("caller.is_native = %d", caller.is_native_frame());
+        }
+        ShouldNotReachHere();
+      }
+
+      if (caller.is_interpreted_frame()) {
+        // Note unsafe oop here
+        assert(thread->thread_state() == _thread_in_vm, "thread not in vm?");
+        methodHandle method = methodHandle(caller.interpreter_frame_method());
+        if (method.not_null() && method()->intrinsic_id() == vmIntrinsics::_enter) {
+          data1 = Handle((oop)(*caller.interpreter_frame_local_at(1)));
+          break;
+        }
+      }
+      reg_map_callee = reg_map;
+      prev_writer = writer;
+      writer = sw.add(caller);
+      callee = caller;
+      caller = caller.sender(&reg_map);
+    } while (true);
+
+    // At this point,
+    // caller is the enter frame
+    // callee is the enter0 frame
+    cut_to_frame = callee;
+
+    sw.set_stack_bottom((address)caller.sp());
+
+    pcs = sw.getCodeCachePCs(); // this could cause a safepoint.
+    blob = sw.write();          // this could cause a safepoint.
+    // For debugging
+    if (DebugContinuation) {
+      sw.print();
+    }
+
+    static int cont_stack_offset = 0;
+    if (cont_stack_offset == 0) {
+      cont_stack_offset = lookup_field_offset("sun/misc/Continuation",
+                                              "stack",
+                                              vmSymbolHandles::object_signature(),
+                                              false,
+                                              THREAD);
+      if (cont_stack_offset == 0) {
+        THROW_IE_("Field not found: Continuation.stack", NULL);
+      }
+    }
+    static int cont_data1_offset = 0;
+    if (cont_data1_offset == 0) {
+      cont_data1_offset = lookup_field_offset("sun/misc/Continuation",
+                                              "data1",
+                                              vmSymbolHandles::object_signature(),
+                                              false,
+                                              THREAD);
+      if (cont_data1_offset == 0) {
+        THROW_IE_("Field not found: Continuation.data1", NULL);
+      }
+    }
+    static int cont_pcs_offset = 0;
+    if (cont_pcs_offset == 0) {
+      cont_pcs_offset = lookup_field_offset("sun/misc/Continuation",
+                                            "pcs",
+                                            vmSymbolHandles::long_array_signature(),
+                                            false,
+                                            THREAD);
+      if (cont_data1_offset == 0) {
+        THROW_IE_("Field not found: Continuation.pcs", NULL);
+      }
+    }
+
+    // Signature of save_cont guarantees continuation is a Continuation
+    Handle cont_h(THREAD, JNIHandles::resolve(continuation));
+    if (cont_h->obj_field(cont_stack_offset) != NULL)
+      // Refuse to fill in a Continuation twice.  It would allow various spoofs.
+      THROW_IE_("Continuation has already been filled in", NULL);
+
+    cont_h->release_obj_field_put(cont_stack_offset, blob());
+    cont_h->release_obj_field_put(cont_data1_offset, data1());
+    cont_h->release_obj_field_put(cont_pcs_offset, pcs());
+    cont = cont_h;
+  } // end of ResouceMark
+
+  if (DebugContinuation) {
+    tty->print_cr("save_cont thread=%x", (intptr_t)thread);
+    tty->print_cr("save_cont thread tlab=%x", (intptr_t)&thread->tlab());
+    tty->print_cr("save_cont thread_state=%x", (intptr_t)thread->thread_state());
+  }
+
+  // The sp/fp/pc/rv_oop to cut the stack to
+  intptr_t cut_sp = (intptr_t) cut_to_frame.sp();
+  intptr_t cut_fp = (intptr_t) cut_to_frame.fp();
+  intptr_t cut_pc = (intptr_t) cut_to_frame.pc();
+
+  SaveFunction save_func = (SaveFunction) SharedRuntime::continuation_save_blob()->entry_point();
+  save_func(thread, cut_sp, cut_fp, cut_pc, cont.raw_value());
+  return NULL;
+}
 
 /// JVM_RegisterUnsafeMethods
 
@@ -1464,6 +3098,14 @@ JNINativeMethod anonk_methods[] = {
     {CC"defineAnonymousClass", CC"("DAC_Args")"CLS,      FN_PTR(Unsafe_DefineAnonymousClass)},
 };
 
+#define CONT "Lsun/misc/Continuation;"
+JNINativeMethod continuation_methods[] = {
+    {CC"save_cont",                CC"("CONT")"OBJ,      FN_PTR(Continuation_SaveContinuation)},
+    {CC"resume_cont",              CC"("OBJ OBJ")V",     FN_PTR(Continuation_ResumeContinuation)},
+    {CC"dec_code_cache_ref_count", CC"(J)V",             FN_PTR(Continuation_DecCodeCacheRefCount)}
+};
+#undef CONT
+
 #undef CC
 #undef FN_PTR
 
@@ -1562,3 +3204,19 @@ JVM_ENTRY(void, JVM_RegisterUnsafeMethods(JNIEnv *env, jclass unsafecls))
     guarantee(status == 0, "register unsafe natives");
   }
 JVM_END
+
+JVM_ENTRY(void, JVM_RegisterContinuationMethods(JNIEnv *env, jclass contcls))
+  UnsafeWrapper("JVM_RegisterContinuationMethods");
+  {
+    ThreadToNativeFromVM ttnfv(thread);
+    {
+      env->RegisterNatives(contcls, continuation_methods, sizeof(continuation_methods)/sizeof(JNINativeMethod));
+      if (env->ExceptionOccurred()) {
+        if (PrintMiscellaneous && (Verbose || WizardMode)) {
+          tty->print_cr("Warning:  Continuation not found.");
+        }
+        env->ExceptionClear();
+      }
+    }
+  }
+JVM_END
diff --git a/sources/hotspot/src/share/vm/runtime/arguments.cpp b/sources/hotspot/src/share/vm/runtime/arguments.cpp
index 4d2f676..9a38d43 100644
--- a/sources/hotspot/src/share/vm/runtime/arguments.cpp
+++ b/sources/hotspot/src/share/vm/runtime/arguments.cpp
@@ -2906,6 +2906,10 @@ jint Arguments::parse(const JavaVMInitArgs* args) {
       UseCompressedOops = false;
     }
   }
+  // Continuation currently does not support compressed oops.
+  if (UseCompressedOops && UseContinuation) {
+    UseCompressedOops = false;
+  }
 #endif // _LP64
 
   // Check the GC selections again.
diff --git a/sources/hotspot/src/share/vm/runtime/deoptimization.cpp b/sources/hotspot/src/share/vm/runtime/deoptimization.cpp
index a0f26be..717d1cb 100644
--- a/sources/hotspot/src/share/vm/runtime/deoptimization.cpp
+++ b/sources/hotspot/src/share/vm/runtime/deoptimization.cpp
@@ -461,6 +461,11 @@ void Deoptimization::cleanup_deopt_info(JavaThread *thread,
   thread->dec_in_deopt_handler();
 }
 
+void Deoptimization::dealloc_deopt_mark(JavaThread* thread) {
+  delete thread->deopt_mark();
+  thread->set_deopt_mark(NULL);
+}
+
 
 // Return BasicType of value being returned
 JRT_LEAF(BasicType, Deoptimization::unpack_frames(JavaThread* thread, int exec_mode))
diff --git a/sources/hotspot/src/share/vm/runtime/deoptimization.hpp b/sources/hotspot/src/share/vm/runtime/deoptimization.hpp
index cb6cf7b..cdc8697 100644
--- a/sources/hotspot/src/share/vm/runtime/deoptimization.hpp
+++ b/sources/hotspot/src/share/vm/runtime/deoptimization.hpp
@@ -27,6 +27,70 @@ class vframeArray;
 class MonitorValue;
 class ObjectValue;
 
+class FrameInfo;
+
+// Data structure used for resuming from a continuation
+class ResumeBlock : public ResourceObj {
+ private:
+  intptr_t* _top_sp;
+  intptr_t* _top_fp;
+  address _top_pc;
+  address _rough_top_pc; // inaccurate pc that has a valid oop map, set by the native wrapper
+  oop* _return_value;
+  intptr_t* _image;
+  intptr_t _image_size;
+  intptr_t _bottom_frame_max_locals;
+  intptr_t _alignment_padding; // in words, >= 0
+
+ public:
+  ResumeBlock(intptr_t* top_sp, intptr_t* top_fp, address top_pc,
+              address rough_top_pc, oop* return_value,
+              intptr_t* image, intptr_t image_size, intptr_t bottom_frame_max_locals,
+              intptr_t alignment_padding) :
+      _top_sp(top_sp),
+      _top_fp(top_fp),
+      _top_pc(top_pc),
+      _rough_top_pc(rough_top_pc),
+      _return_value(return_value),
+      _image(image),
+      _image_size(image_size),
+      _bottom_frame_max_locals(bottom_frame_max_locals),
+      _alignment_padding(alignment_padding) {
+  }
+
+  static int top_sp_offset_in_bytes() { return offset_of(ResumeBlock, _top_sp); }
+  static int top_fp_offset_in_bytes() { return offset_of(ResumeBlock, _top_fp); }
+  static int top_pc_offset_in_bytes() { return offset_of(ResumeBlock, _top_pc); }
+  static int rough_top_pc_offset_in_bytes() { return offset_of(ResumeBlock, _rough_top_pc); }
+  static int return_value_offset_in_bytes() { return offset_of(ResumeBlock, _return_value); }
+  static int image_offset_in_bytes() { return offset_of(ResumeBlock, _image); }
+  static int image_size_offset_in_bytes() { return offset_of(ResumeBlock, _image_size); }
+  static int bottom_frame_max_locals_offset_in_bytes() { return offset_of(ResumeBlock, _bottom_frame_max_locals); }
+  static int alignment_padding_offset_in_bytes() { return offset_of(ResumeBlock, _alignment_padding); }
+
+  intptr_t* top_sp() { return _top_sp; }
+  intptr_t* top_fp() { return _top_fp; }
+  address top_pc() { return _top_pc; }
+  address rough_top_pc() { return _rough_top_pc; }
+  oop* return_value() { return _return_value; }
+  intptr_t* image() { return _image; }
+  intptr_t image_size() { return _image_size; }
+
+  void print() {
+    tty->print_cr("ResumeBlock: " INTPTR_FORMAT, (intptr_t) this);
+    tty->print_cr("top_sp=" INTPTR_FORMAT ", top_fp=" INTPTR_FORMAT ", top_pc=" INTPTR_FORMAT ", return_value=" INTPTR_FORMAT,
+                  _top_sp, _top_fp, _top_pc, _return_value != NULL ? (intptr_t)*_return_value : 0);
+    tty->print_cr("image=" INTPTR_FORMAT, (intptr_t) _image);
+    tty->print_cr("image_size=" INTPTR_FORMAT, _image_size);
+    tty->print_cr("bottom_frame_max_locals=" INTPTR_FORMAT, _bottom_frame_max_locals);
+    tty->print_cr("alignment_padding=" INTPTR_FORMAT, _alignment_padding);
+    for (int i = 0; i < _image_size; ++i) {
+      intptr_t* p = &_image[i];
+      tty->print_cr("     " INTPTR_FORMAT ": " INTPTR_FORMAT ":   " INTPTR_FORMAT, p, _top_sp + i, *p);
+    }
+  }
+};
+
 class Deoptimization : AllStatic {
  public:
   // What condition caused the deoptimization?
@@ -197,6 +261,9 @@ class Deoptimization : AllStatic {
   // Return BasicType of call return type, if any
   static BasicType unpack_frames(JavaThread* thread, int exec_mode);
 
+  // Called by the continuation resume blob
+  static void dealloc_deopt_mark(JavaThread* thread);
+
   // Cleans up deoptimization bits on thread after unpacking or in the
   // case of an exception.
   static void cleanup_deopt_info(JavaThread  *thread,
diff --git a/sources/hotspot/src/share/vm/runtime/frame.cpp b/sources/hotspot/src/share/vm/runtime/frame.cpp
index 9fb56f9..be69167 100644
--- a/sources/hotspot/src/share/vm/runtime/frame.cpp
+++ b/sources/hotspot/src/share/vm/runtime/frame.cpp
@@ -838,7 +838,8 @@ oop* frame::interpreter_callee_receiver_addr(symbolHandle signature) {
 }
 
 
-void frame::oops_interpreted_do(OopClosure* f, const RegisterMap* map, bool query_oop_map_cache) {
+void frame::oops_interpreted_do(OopClosure* f, const RegisterMap* map, bool query_oop_map_cache,
+                                OopMapCacheId oop_map_cache_id) {
   assert(is_interpreted_frame(), "Not an interpreted frame");
   assert(map != NULL, "map must be set");
   Thread *thread = Thread::current();
@@ -921,7 +922,7 @@ void frame::oops_interpreted_do(OopClosure* f, const RegisterMap* map, bool quer
   // process locals & expression stack
   InterpreterOopMap mask;
   if (query_oop_map_cache) {
-    m->mask_for(bci, &mask);
+    m->mask_for(bci, &mask, oop_map_cache_id);
   } else {
     OopMapCache::compute_one_oop_map(m, bci, &mask);
   }
@@ -1281,4 +1282,14 @@ StackFrameStream::StackFrameStream(JavaThread *thread, bool update) : _reg_map(t
   assert(thread->has_last_Java_frame(), "sanity check");
   _fr = thread->last_frame();
   _is_done = false;
+  // In the call to ThreadInVMfromNativeForContinuation::dealloc in
+  // the continuation save blob, GC can occur and will walk down the
+  // stack of this thread from the enter0 frame (which is the
+  // designated last Java frame.) But here in the GC code we shouldn't
+  // examine oops in the outgoing arguments of the enter0 frame
+  // because they can be garbage if the frame above (the enter1 frame)
+  // is a compiled frame.
+  if (thread->cont_thread_transition() != NULL) {
+    _reg_map.set_include_argument_oops(false);
+  }
 }
diff --git a/sources/hotspot/src/share/vm/runtime/frame.hpp b/sources/hotspot/src/share/vm/runtime/frame.hpp
index 68f7115..ff2b1b7 100644
--- a/sources/hotspot/src/share/vm/runtime/frame.hpp
+++ b/sources/hotspot/src/share/vm/runtime/frame.hpp
@@ -354,7 +354,7 @@ class frame VALUE_OBJ_CLASS_SPEC {
 
   // Oops-do's
   void oops_compiled_arguments_do(symbolHandle signature, bool has_receiver, const RegisterMap* reg_map, OopClosure* f);
-  void oops_interpreted_do(OopClosure* f, const RegisterMap* map, bool query_oop_map_cache = true);
+  void oops_interpreted_do(OopClosure* f, const RegisterMap* map, bool query_oop_map_cache = true, OopMapCacheId oop_map_cache_id = default_oop_map_cache_id);
 
  private:
   void oops_interpreted_arguments_do(symbolHandle signature, bool has_receiver, OopClosure* f);
diff --git a/sources/hotspot/src/share/vm/runtime/globals.hpp b/sources/hotspot/src/share/vm/runtime/globals.hpp
index 65874f5..92d222b 100644
--- a/sources/hotspot/src/share/vm/runtime/globals.hpp
+++ b/sources/hotspot/src/share/vm/runtime/globals.hpp
@@ -3523,6 +3523,12 @@ class CommandLineFlags {
   develop(bool, TraceInvokeDynamic, false,                                  \
           "trace internal invoke dynamic operations")                       \
                                                                             \
+  product(bool, UseContinuation, true,                                      \
+          "Enable the Continuation feature")                                \
+                                                                            \
+  diagnostic(bool, DebugContinuation, false,                                \
+             "Print the Continuation debug messages")                       \
+                                                                            \
   diagnostic(bool, PauseAtStartup,      false,                              \
           "Causes the VM to pause at startup time and wait for the pause "  \
           "file to be removed (default: ./vm.paused.<pid>)")                \
diff --git a/sources/hotspot/src/share/vm/runtime/interfaceSupport.hpp b/sources/hotspot/src/share/vm/runtime/interfaceSupport.hpp
index 60c854b..76bf004 100644
--- a/sources/hotspot/src/share/vm/runtime/interfaceSupport.hpp
+++ b/sources/hotspot/src/share/vm/runtime/interfaceSupport.hpp
@@ -251,6 +251,33 @@ class ThreadInVMfromNative : public ThreadStateTransition {
   }
 };
 
+// Special version of ThreadInVMfromNative for continuation operations
+class ThreadInVMfromNativeForContinuation : public CHeapObj {
+ private:
+  JavaThread* _thread;
+ public:
+  ThreadInVMfromNativeForContinuation(JavaThread* thread) {
+    _thread = thread;
+    ThreadStateTransition::transition_from_native(_thread, _thread_in_vm);
+  }
+  ~ThreadInVMfromNativeForContinuation() {
+    if (DebugContinuation) {
+      tty->print_cr("~ThreadInVMfromNativeForContinuation... " INTPTR_FORMAT,
+                    (intptr_t) _thread);
+    }
+    ThreadStateTransition::transition_and_fence(_thread, _thread_in_vm, _thread_in_native);
+  }
+  static void dealloc(JavaThread* thread) {
+    ThreadInVMfromNativeForContinuation* tt = thread->cont_thread_transition();
+    assert(tt != NULL, "Null cont thread transition");
+    delete tt; // this calls the destructor and could block for GC
+    // The field thread::_cont_thread_transition must be non-null
+    // (i.e., pointing the deallocated) until the end of the
+    // continuation_{save,resume}_blob so that GCs that happen while
+    // the thread is in the blob won't look at the arguments of the
+    // top enter0 frame.
+  }
+};
 
 class ThreadToNativeFromVM : public ThreadStateTransition {
  public:
diff --git a/sources/hotspot/src/share/vm/runtime/sharedRuntime.hpp b/sources/hotspot/src/share/vm/runtime/sharedRuntime.hpp
index 00b486b..e367317 100644
--- a/sources/hotspot/src/share/vm/runtime/sharedRuntime.hpp
+++ b/sources/hotspot/src/share/vm/runtime/sharedRuntime.hpp
@@ -262,9 +262,16 @@ class SharedRuntime: AllStatic {
   // deopt blob
   static void generate_deopt_blob(void);
   static DeoptimizationBlob* _deopt_blob;
+  // continuation blob
+  static RuntimeStub* generate_continuation_save_blob(void);
+  static RuntimeStub* generate_continuation_resume_blob(void);
+  static RuntimeStub* _continuation_save_blob;
+  static RuntimeStub* _continuation_resume_blob;
 
   public:
   static DeoptimizationBlob* deopt_blob(void)      { return _deopt_blob; }
+  static RuntimeStub* continuation_save_blob(void)   { return _continuation_save_blob; }
+  static RuntimeStub* continuation_resume_blob(void) { return _continuation_resume_blob; }
 
   // Resets a call-site in compiled code so it will get resolved again.
   static methodHandle reresolve_call_site(JavaThread *thread, TRAPS);
diff --git a/sources/hotspot/src/share/vm/runtime/thread.cpp b/sources/hotspot/src/share/vm/runtime/thread.cpp
index 5527173..1d26595 100644
--- a/sources/hotspot/src/share/vm/runtime/thread.cpp
+++ b/sources/hotspot/src/share/vm/runtime/thread.cpp
@@ -1158,6 +1158,7 @@ void JavaThread::initialize() {
   set_vframe_array_head(NULL);
   set_vframe_array_last(NULL);
   set_deferred_locals(NULL);
+  set_cont_thread_transition(NULL);
   set_deopt_mark(NULL);
   clear_must_deopt_id();
   set_monitor_chunks(NULL);
diff --git a/sources/hotspot/src/share/vm/runtime/thread.hpp b/sources/hotspot/src/share/vm/runtime/thread.hpp
index 901c7f7..9ef54a3 100644
--- a/sources/hotspot/src/share/vm/runtime/thread.hpp
+++ b/sources/hotspot/src/share/vm/runtime/thread.hpp
@@ -39,6 +39,7 @@ class CompileQueue;
 class CompilerCounters;
 class vframeArray;
 
+class ThreadInVMfromNativeForContinuation;
 class DeoptResourceMark;
 class jvmtiDeferredLocalVariableSet;
 
@@ -672,6 +673,9 @@ class JavaThread: public Thread {
 
   JNIEnv        _jni_environment;
 
+  // Used by continuation operations
+  ThreadInVMfromNativeForContinuation* _cont_thread_transition;
+
   // Deopt support
   DeoptResourceMark*  _deopt_mark;               // Holds special ResourceMark for deoptimization
 
@@ -1082,6 +1086,10 @@ class JavaThread: public Thread {
   void set_vframe_array_last(vframeArray* value) { _vframe_array_last = value; }
   vframeArray* vframe_array_last() const         { return _vframe_array_last;  }
 
+  // Continuation support
+  void set_cont_thread_transition(ThreadInVMfromNativeForContinuation* value)  { _cont_thread_transition = value; }
+  ThreadInVMfromNativeForContinuation* cont_thread_transition(void)            { return _cont_thread_transition; }
+
   // The special resourceMark used during deoptimization
 
   void set_deopt_mark(DeoptResourceMark* value)  { _deopt_mark = value; }
@@ -1182,6 +1190,7 @@ class JavaThread: public Thread {
   static ByteSize callee_target_offset()         { return byte_offset_of(JavaThread, _callee_target       ); }
   static ByteSize vm_result_offset()             { return byte_offset_of(JavaThread, _vm_result           ); }
   static ByteSize vm_result_2_offset()           { return byte_offset_of(JavaThread, _vm_result_2         ); }
+  static ByteSize cont_thread_transition_offset(){ return byte_offset_of(JavaThread, _cont_thread_transition); }
   static ByteSize thread_state_offset()          { return byte_offset_of(JavaThread, _thread_state        ); }
   static ByteSize saved_exception_pc_offset()    { return byte_offset_of(JavaThread, _saved_exception_pc  ); }
   static ByteSize osthread_offset()              { return byte_offset_of(JavaThread, _osthread            ); }
diff --git a/sources/hotspot/src/share/vm/runtime/vframeArray.cpp b/sources/hotspot/src/share/vm/runtime/vframeArray.cpp
index c40b512..5a7d7d0 100644
--- a/sources/hotspot/src/share/vm/runtime/vframeArray.cpp
+++ b/sources/hotspot/src/share/vm/runtime/vframeArray.cpp
@@ -26,6 +26,117 @@
 # include "incls/_vframeArray.cpp.incl"
 
 
+#ifndef PRODUCT
+void FrameInfo::print(outputStream* st) {
+  st->print("FrameInfo method: ");
+  _method->name()->print_symbol_on(st);
+  st->print(" (bci: %i, ", _bci);
+  st->print("locals: %i, expressions: %i, monitors: %i\n", _locals->size(), _expressions->size(), _monitors->length());
+
+  st->print("  locals: ");
+  for (int i=0; i<_locals->size(); i++) {
+    StackValue* v = _locals->at(i);
+    switch (v->type()) {
+    case T_INT:
+      st->print(INTPTR_FORMAT " ", v->get_int());
+      break;
+    case T_OBJECT:
+      st->print("OBJ(" INTPTR_FORMAT ") ", v->get_int(T_OBJECT));
+      break;
+    default:
+      ShouldNotReachHere();
+    }
+  }
+
+  st->print("\n  expressions: ");
+  for (int i=0; i<_expressions->size(); i++) {
+    StackValue* v = _expressions->at(i);
+    switch (v->type()) {
+    case T_INT:
+      st->print("%08x ", v->get_int());
+      break;
+    case T_OBJECT:
+      st->print("OBJ(%08x) ", v->get_int(T_OBJECT));
+      break;
+    default:
+      ShouldNotReachHere();
+    }
+  }
+  st->print("\n  monitors: ");
+  for (int i=0; i<_monitors->length(); i++) {
+    MonitorInfo* v = _monitors->at(i);
+    st->print("%08x ", v->owner());
+  }
+  st->print("\n");
+}
+#endif /* PRODUCT */
+
+#ifdef ASSERT
+void FrameInfo::verify() {
+  // TODO add useful assertions
+}
+#endif /* ASSERT */
+
+
+void vframeArrayElement::fill_in(FrameInfo* frame_info) {
+
+  // copy the info from the FrameInfo object - it has to be in the correct format (object locals and expressions as ints)
+  _method = frame_info->method();
+  _bci    = frame_info->bci();
+  _locals = frame_info->locals();
+  _expressions = frame_info->expressions();
+
+  // reacquire the monitors of the stack frame
+  GrowableArray<MonitorInfo*>* list = frame_info->monitors();
+  if (list->is_empty()) {
+    _monitors = NULL;
+  } else {
+    int index;
+    JavaThread* thread = JavaThread::current();
+
+    // monitor handling is not finished...
+    //ShouldNotReachHere();
+
+    // Allocate monitor chunk
+    _monitors = new MonitorChunk(list->length());
+    thread->add_monitor_chunk(_monitors);
+
+    // Simply restore monitor entries with lockee obj + displaced
+    // header saved by write_monitors.  Populate monitor chuncks (that
+    // unpack_to_stack copies to real interpreter frames later) from
+    // the MonitorInfos.
+    for (index = 0; index < list->length(); index++) {
+      MonitorInfo* monitor = list->at(index);
+      oop obj = monitor->owner();
+      BasicObjectLock* dest = _monitors->at(index);
+      dest->set_obj(obj);
+      dest->lock()->set_displaced_header(monitor->lock()->displaced_header());
+    }
+  }
+}
+
+vframeArray* vframeArray::allocate(JavaThread* thread, int frame_size, GrowableArray<FrameInfo*>* frame_infos,
+                                   frame sender, frame caller) {
+
+  // Allocate the vframeArray
+  vframeArray * result = (vframeArray*) AllocateHeap(sizeof(vframeArray) + // fixed part
+                                                     sizeof(vframeArrayElement) * (frame_infos->length() - 1), // variable part
+                                                     "vframeArray::allocate");
+  result->_frames = frame_infos->length();
+  result->_owner_thread = thread;
+  result->_sender = sender;
+  result->_caller = caller;
+  // result->_original = self;
+  result->set_unroll_block(NULL); // initialize it
+
+  result->_frame_size = frame_size;
+  for(int i = 0; i < frame_infos->length(); i++) {
+    result->element(i)->fill_in(frame_infos->at(i));
+  }
+
+  return result;
+}
+
 int vframeArrayElement:: bci(void) const { return (_bci == SynchronizationEntryBCI ? 0 : _bci); }
 
 void vframeArrayElement::free_monitors(JavaThread* jt) {
diff --git a/sources/hotspot/src/share/vm/runtime/vframeArray.hpp b/sources/hotspot/src/share/vm/runtime/vframeArray.hpp
index b0dccda..5880a87 100644
--- a/sources/hotspot/src/share/vm/runtime/vframeArray.hpp
+++ b/sources/hotspot/src/share/vm/runtime/vframeArray.hpp
@@ -34,6 +34,46 @@ class MonitorStackClosure;
 class MonitorArrayElement;
 class StackValueCollection;
 
+// Represents the current state of one stack frame. Used mainly for creating vframeArrays from scratch.
+
+class FrameInfo : public ResourceObj {
+private:
+  methodOop _method;
+  int _bci;
+  StackValueCollection* _locals;
+  StackValueCollection* _expressions;
+  GrowableArray<MonitorInfo*>* _monitors;
+
+public:
+
+  FrameInfo(methodOop method, int bci, StackValueCollection* locals, StackValueCollection* expressions, GrowableArray<MonitorInfo*>* monitors) {
+    _method = method;
+    _bci = bci;
+    _locals = locals;
+    _expressions = expressions;
+    _monitors = monitors;
+  }
+
+  methodOop method() const                      { return _method; }
+
+  int bci() const                               { return _bci; }
+
+  StackValueCollection* locals() const          { return _locals; }
+
+  StackValueCollection* expressions() const     { return _expressions; }
+
+  GrowableArray<MonitorInfo*>* monitors() const { return _monitors; }
+
+#ifndef PRODUCT
+  void print(outputStream* st);
+#endif /* PRODUCT */
+
+#ifdef ASSERT
+  void verify();
+#endif /* ASSERT */
+};
+
+
 // A vframeArrayElement is an element of a vframeArray. Each element
 // represent an interpreter frame which will eventually be created.
 
@@ -68,6 +108,7 @@ class vframeArrayElement : public _ValueObj {
   StackValueCollection* expressions(void) const        { return _expressions; }
 
   void fill_in(compiledVFrame* vf);
+  void fill_in(FrameInfo* frame_info);
 
   // Formerly part of deoptimizedVFrame
 
@@ -147,6 +188,10 @@ class vframeArray: public CHeapObj {
   static vframeArray* allocate(JavaThread* thread, int frame_size, GrowableArray<compiledVFrame*>* chunk,
                                RegisterMap* reg_map, frame sender, frame caller, frame self);
 
+  // special case for creating a vframeArray from scratch
+  static vframeArray* allocate(JavaThread* thread, int frame_size, GrowableArray<FrameInfo*>* frame_infos,
+                               frame sender, frame caller);
+
 
   vframeArrayElement* element(int index)        { assert(is_within_bounds(index), "Bad index"); return &_elements[index]; }
 
diff --git a/sources/hotspot/src/share/vm/runtime/vmStructs.cpp b/sources/hotspot/src/share/vm/runtime/vmStructs.cpp
index 05ccdb9..415e958 100644
--- a/sources/hotspot/src/share/vm/runtime/vmStructs.cpp
+++ b/sources/hotspot/src/share/vm/runtime/vmStructs.cpp
@@ -116,7 +116,7 @@ static inline uint64_t cast_uint64_t(size_t x)
   nonstatic_field(instanceKlass,               _vtable_len,                                   int)                                   \
   nonstatic_field(instanceKlass,               _itable_len,                                   int)                                   \
   nonstatic_field(instanceKlass,               _reference_type,                               ReferenceType)                         \
-  volatile_nonstatic_field(instanceKlass,      _oop_map_cache,                                OopMapCache*)                          \
+  volatile_nonstatic_field(instanceKlass,      _oop_map_caches[0],                            OopMapCache*)                          \
   nonstatic_field(instanceKlass,               _jni_ids,                                      JNIid*)                                \
   nonstatic_field(instanceKlass,               _osr_nmethods_head,                            nmethod*)                              \
   nonstatic_field(instanceKlass,               _breakpoints,                                  BreakpointInfo*)                       \
diff --git a/sources/hotspot/src/share/vm/utilities/globalDefinitions.hpp b/sources/hotspot/src/share/vm/utilities/globalDefinitions.hpp
index a5a8ae4..723ca1c 100644
--- a/sources/hotspot/src/share/vm/utilities/globalDefinitions.hpp
+++ b/sources/hotspot/src/share/vm/utilities/globalDefinitions.hpp
@@ -1171,3 +1171,9 @@ inline int build_int_from_shorts( jushort low, jushort high ) {
 # endif /* ASSERT */
 
 #define ARRAY_SIZE(array) (sizeof(array)/sizeof((array)[0]))
+
+enum OopMapCacheId {
+  default_oop_map_cache_id      = 0,
+  continuation_oop_map_cache_id = 1,
+  limit_oop_map_cache_id        = 2 // Not a real entry. Always the last.
+};
diff --git a/sources/jdk/.hg/dirstate b/sources/jdk/.hg/dirstate
index 38255bf65268527094f459bdd6e351358cdedeb9..590ea91586af0eddb17cc58e8f305a259a87a350 100644
GIT binary patch
delta 58846
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%0De={7A2m@%-DjHB)
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

delta 58842
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

diff --git a/sources/jdk/src/share/classes/sun/misc/Continuation.java b/sources/jdk/src/share/classes/sun/misc/Continuation.java
new file mode 100644
index 0000000..e3d44e8
--- /dev/null
+++ b/sources/jdk/src/share/classes/sun/misc/Continuation.java
@@ -0,0 +1,164 @@
+/*
+ * Copyright 2010 Google, Inc.  All Rights Reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Sun designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Sun in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package sun.misc;
+
+/**
+ * The JVM Continuation class. The API design is still in progress.
+ *
+ * @author Hiroshi Yamauchi
+ */
+public class Continuation {
+
+    private static native void registerNatives();
+    static {
+        registerNatives();
+    }
+
+    /**
+     * The stack frames data
+     */
+    protected volatile Object stack;
+
+    /**
+     * The list of compiled code PCs in the stack. Needed to reclaim
+     * the compiled code in the code cache.
+     */
+    protected volatile long[] pcs;
+
+    /**
+     * A data field for convenience. This field is set to the second
+     * <code>data</code> parameter to {@link #enter} upon a {@link
+     * #save} call.
+     *
+     * <p>For example, this field can be used to pass some data from
+     * a scope entry point (a {@link #enter} call site) to the
+     * continuation resume point.
+     */
+    protected volatile Object data1;
+
+    /**
+     * A simple data field for convenience. For example, this field
+     * can be used to pass some data from the continuation save
+     * point to the continuation resume point.
+     */
+    protected volatile Object data2;   // the user-defined data
+
+    public Object data1() { synchronized(this) { return data1; } }
+    public Object data2() { synchronized(this) { return data2; } }
+    public void set_data1(Object o) { synchronized(this) { data1 = o; } }
+    public void set_data2(Object o) { synchronized(this) { data2 = o; } }
+    public boolean isSaved() { return stack != null; }
+
+    /**
+     * The continuation may save the compiled stack frames. The
+     * reference count of the compiled code (nmethod) is incremented
+     * upon a continuation save and decremented by this finalizer.
+     */
+    protected void finalize() throws Throwable {
+        if (pcs == null || pcs.length == 0) {
+            return;
+        }
+        for (long pc : pcs) {
+            dec_code_cache_ref_count(pc);
+        }
+    }
+
+    /**
+     * Copies the stack frames in the current scope, and stores them
+     * in this object.  This method must be called in an enclosing
+     * scope. Calling this method causes the stack frames in the
+     * scope to suspend (including the current frame) and the enter
+     * call at the entry of the current scope to return.
+     *
+     * @return the parameter passed to the resume call when the saved stack
+     *         frames are resumed in the future.
+     */
+    public Object save() {
+        return save_cont(this);
+    }
+
+    /**
+     * Reactivates the stack frames saved in this object on the
+     * current thread.  Overwrites the stack frames in the current
+     * scope with the saved stack frames.  This method must be
+     * called in an enclosing scope. Calling this method causes the
+     * suspended save call to resume from the point where it was
+     * suspended.
+     *
+     * @param rv the value to be returned from the resumed save call site.
+     */
+    public void resume(Object rv) {
+        if (stack == null) {
+            throw new IllegalArgumentException(
+                "Continuation hasn't been saved or tried to resume for a second time.");
+        }
+        Object s = stack;
+        stack = null; // resumable only once
+        resume_cont(s, rv);
+    }
+
+    /**
+     * Marks the beginning of a new 'scope' in preparation for stack
+     * save/resume.  Executes the given Runnable.
+     *
+     * @param data any user defined data to be passed from this call
+     *             site to the point where {@link #resume} is called
+     *             for convenience. The {@link #data1} field will be
+     *             set to this object.
+     * @return the Continuation object after the scope was saved
+     *         into a Continuation object or null if it wasn't and
+     *         simply returned
+     */
+    public static Object enter(Runnable r, Object data) {
+        Object rv = enter0(r, data);
+        return rv;
+    }
+
+    /*
+     * This method currently exists just for convenience for the
+     * continuation implementation in the JVM. This method along with
+     * enter() above will never be jitted. This may go away in the
+     * future.
+     */
+    private static Object enter0(Runnable r, Object data) {
+        Object rv = enter1(r, data);
+        return rv;
+    }
+
+    /*
+     * This method currently exists just for convenience for the
+     * continuation implementation in the JVM. This may go away in the
+     * future.
+     */
+    private static Object enter1(Runnable r, Object data) {
+        r.run();
+        return null; // If saved, this will return the CSE.
+    }
+
+    private static native Object save_cont(Continuation cont);
+    private static native void resume_cont(Object stack, Object rv);
+    private static native void dec_code_cache_ref_count(long pc);
+}
diff --git a/sources/jdk/test/sun/misc/Continuation/ContinuationTest1.java b/sources/jdk/test/sun/misc/Continuation/ContinuationTest1.java
new file mode 100644
index 0000000..d6aaed9
--- /dev/null
+++ b/sources/jdk/test/sun/misc/Continuation/ContinuationTest1.java
@@ -0,0 +1,248 @@
+/*
+ * Copyright 2010 Google, Inc.  All Rights Reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Sun designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Sun in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+import java.util.*;
+import sun.misc.Continuation;
+
+/*
+ * Basic tests for Continuation.
+ */
+public class ContinuationTest1 {
+
+    public Object subSave(Continuation cont, int a, int b, int c, int d, int e) {
+        int i;
+        cont.save();
+        i = 0;
+        i += a;
+        i += b;
+        i += c;
+        i += d;
+        i += e;
+        assertEquals(15, i);
+        return 10102;
+    }
+
+    private int cnt = 0;
+
+    public void testRec() {
+        final Continuation c = new Continuation();
+        Runnable r1 = new Runnable() {
+            public void run() {
+                assertEquals(10102, subSave(c, 1, 2, 3, 4, 5));
+            }
+          };
+        Continuation.enter(r1, null);
+        Runnable r2 = new Runnable() {
+            public void run() {
+                c.resume(null);
+            }
+          };
+        Continuation.enter(r2, null);
+        System.out.println("testRec   : PASS");
+    }
+
+    public void testSimple() {
+        final List<Integer> actions = new LinkedList<Integer>();
+        final Continuation c = new Continuation();
+        String data1 = "data1";
+        Runnable r1 = new Runnable() {
+            public void run() {
+                actions.add(1);
+                c.save();
+                actions.add(3);
+            }
+          };
+        Continuation.enter(r1, data1);
+        Runnable r2 = new Runnable() {
+            public void run() {
+                actions.add(2);
+                c.resume(null);
+                actions.add(100);
+            }
+          };
+        Continuation.enter(r2, null);
+        assertIdentity(c.data1(), data1);
+        assertEquals(actions.size(), 3);
+        assertEquals(actions.get(0), 1);
+        assertEquals(actions.get(1), 2);
+        assertEquals(actions.get(2), 3);
+        System.out.println("testSimple: PASS");
+    }
+
+    // If a monitor is held when a continuation is attempted to be saved,
+    // an exception should be thrown.
+    public void testMonitors() {
+        final Continuation c = new Continuation();
+        final Object lock = new Object();
+        Runnable r1 = new Runnable() {
+            public void run() {
+                synchronized(lock) {
+                    c.save(); // this should throw an exception
+                    assertTrue(false);
+                }
+                assertTrue(false);
+            }
+          };
+        try {
+            Continuation.enter(r1, null);
+        } catch (Throwable t) {
+            System.out.println("testMonitors: PASS");
+            return;
+        }
+        assertTrue(false);
+    }
+
+    // If the continuation is attempted to be resumed twice, an
+    // exception should be thrown.
+    public void testDoubleResume() {
+        final Continuation c = new Continuation();
+        final Object lock = new Object();
+        Runnable r1 = new Runnable() {
+            public void run() {
+                c.save();
+            }
+          };
+        Continuation.enter(r1, null);
+        Runnable r2 = new Runnable() {
+            public void run() {
+                c.resume(null);
+            }
+          };
+        Continuation.enter(r2, null);
+        try {
+            Continuation.enter(r2, null);
+        } catch (Throwable t) {
+            System.out.println("testDoubleResume: PASS");
+            return;
+        }
+        assertTrue(false);
+    }
+
+    public void testData1() throws Exception {
+        final Continuation c = new Continuation();
+        final Object data1 = new Object();
+        Runnable r1 = new Runnable() {
+            public void run() {
+                c.save();
+                assertIdentity(c.data1(), data1);
+            }
+          };
+        Continuation.enter(r1, data1);
+        assertIdentity(c.data1(), data1);
+        Runnable r2 = new Runnable() {
+            public void run() {
+                Runnable r3 = new Runnable() {
+                    public void run() {
+                        c.resume(null);
+                    }
+                  };
+                Continuation.enter(r3, null);
+            }
+          };
+        Thread t = new Thread(r2);
+        t.start();
+        t.join();
+        System.out.println("testData1: PASS");
+    }
+
+    public void testManyParams() {
+        final Continuation c = new Continuation();
+        Runnable r1 = new Runnable() {
+            public void run() {
+                Object rv = manyParamsSub(c, 5, true, false, 1, (short) 2, (byte) 3, (char) 4, (long) 5, 6, (short) 7, (byte) 8, (char) 9,
+                                          (long) 10, (float) 11, (double) 12, (float) 13, (double) 14, 15, 16, 17, 18, 19, 20);
+                assertEquals(43, rv);
+            }
+          };
+        Continuation.enter(r1, null);
+        Runnable r2 = new Runnable() {
+            public void run() {
+                c.resume(43);
+            }
+          };
+        Continuation.enter(r2, null);
+        System.out.println("testManyParams: PASS");
+    }
+
+    private Object manyParamsSub(Continuation cont, int depth, boolean a, boolean b, int c, short d, byte e, char f,
+                                 long g, Integer h, Short i, Byte j, Character k, Long l, float m, double n, Float o, Double p, Integer q, int r,
+                                 int s, int t, int u, int v) {
+        final Object ret;
+        if (depth > 0)
+            ret = manyParamsSub(cont, depth - 1, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v);
+        else
+            ret = cont.save();
+        assertEquals(a, true);
+        assertEquals(b, false);
+        assertEquals(c, 1);
+        assertEquals(d, (short) 2);
+        assertEquals(e, (byte) 3);
+        assertEquals(f, (char) 4);
+        assertEquals(g, (long) 5);
+        assertEquals(h, 6);
+        assertEquals(i, (short) 7);
+        assertEquals(j, (byte) 8);
+        assertEquals(k, (char) 9);
+        assertEquals(l, (long) 10);
+        assertEquals(m, (float) 11);
+        assertEquals(n, (double) 12);
+        assertEquals(o, (float) 13);
+        assertEquals(p, (double) 14);
+        assertEquals(q, 15);
+        assertEquals(r, 16);
+        assertEquals(s, 17);
+        assertEquals(t, 18);
+        assertEquals(u, 19);
+        assertEquals(v, 20);
+        return ret;
+    }
+
+    public static void main(String[] args) throws Exception {
+        ContinuationTest1 test = new ContinuationTest1();
+        test.testSimple();
+        test.testData1();
+        test.testRec();
+        test.testManyParams();
+        test.testMonitors();
+        test.testDoubleResume();
+    }
+
+    private static void assertTrue(boolean cond) {
+        if (!cond) {
+            throw new RuntimeException("assertion failed");
+        }
+    }
+
+    private static void assertEquals(Object o1, Object o2) {
+        if (!o1.equals(o2)) {
+            throw new RuntimeException("assertion failed: [" + o1 + "] != [" + o2 + "]");
+        }
+    }
+
+    private static void assertIdentity(Object o1, Object o2) {
+        if (o1 != o2) {
+            throw new RuntimeException("assertion failed: [" + o1 + "] != [" + o2 + "]");
+        }
+    }
+}
diff --git a/sources/jdk/test/sun/misc/Continuation/ContinuationTest2.java b/sources/jdk/test/sun/misc/Continuation/ContinuationTest2.java
new file mode 100644
index 0000000..811850f
--- /dev/null
+++ b/sources/jdk/test/sun/misc/Continuation/ContinuationTest2.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright 2010 Google, Inc.  All Rights Reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Sun designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Sun in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+import sun.misc.Continuation;
+
+/*
+ * Tests a simple continuation save/resume in the same thread.
+ */
+public class ContinuationTest2 {
+
+    public static void main(String[] args) {
+        Object rv = Continuation.enter(
+            new Runnable() {
+              public void run() {
+                  System.out.println(ContinuationTestBase.gammon1());
+              }
+            }, null);
+        System.out.println("main: " + rv);
+        final Continuation cont = (Continuation) rv;
+        Object rv1 = Continuation.enter(
+            new Runnable() {
+              public void run() {
+                cont.resume("resuming");
+              }
+            }, null);
+        System.out.println("main2");
+    }
+}
diff --git a/sources/jdk/test/sun/misc/Continuation/ContinuationTest3.java b/sources/jdk/test/sun/misc/Continuation/ContinuationTest3.java
new file mode 100644
index 0000000..7b5eacd
--- /dev/null
+++ b/sources/jdk/test/sun/misc/Continuation/ContinuationTest3.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright 2010 Google, Inc.  All Rights Reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Sun designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Sun in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+import sun.misc.Continuation;
+
+/*
+ * Tests a simple continuation save/resume between two threads in a
+ * loop.
+ *
+ * The two threads synchronize via a join.
+ */
+public class ContinuationTest3 {
+
+    public static void main(String[] args) throws Exception {
+      for(int i = 0; i < 10; ++i) {
+        Object rv = Continuation.enter(
+            new Runnable() {
+              public void run() {
+                System.out.println(ContinuationTestBase.gammon2(65000));
+              }
+            }, null);
+        System.out.println("main: " + rv);
+        final Continuation cont = (Continuation) rv;
+        System.out.println("cont: " + cont);
+        Runnable r = new Runnable() {
+            public void run() {
+                Object rv1 = Continuation.enter(
+                    new Runnable() {
+                        public void run() {
+                          cont.resume("resuming");
+                        }
+                    }, null);
+                System.out.println("thread end");
+            }
+          };
+        Thread t = new Thread(r);
+        t.start();
+        t.join();
+        System.out.println("main2");
+      }
+    }
+}
diff --git a/sources/jdk/test/sun/misc/Continuation/ContinuationTest4.java b/sources/jdk/test/sun/misc/Continuation/ContinuationTest4.java
new file mode 100644
index 0000000..4438e8b
--- /dev/null
+++ b/sources/jdk/test/sun/misc/Continuation/ContinuationTest4.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright 2010 Google, Inc.  All Rights Reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Sun designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Sun in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+import sun.misc.Continuation;
+
+/*
+ * Tests a simple continuation save/resume between two threads in a loop.
+ *
+ * Deoptimizations happen.
+ *
+ * The two threads synchronize via a join.
+ */
+public class ContinuationTest4 {
+
+    public static void main(String[] args) throws Exception {
+      for(int i = 0; i < 10; ++i) {
+        Object rv = Continuation.enter(
+            new Runnable() {
+              public void run() {
+                System.out.println(ContinuationTestBase.gammon3(true));
+              }
+            }, null);
+        System.out.println("main: " + rv);
+        final Continuation cont = (Continuation) rv;
+        System.out.println("cont: " + cont);
+        ContinuationTestBase.gammon3(false); // induce deopt of gammon3
+        Runnable r = new Runnable() {
+            public void run() {
+                Object rv1 = Continuation.enter(
+                    new Runnable() {
+                        public void run() {
+                            cont.resume("resuming");
+                        }
+                    }, null);
+                System.out.println("thread end");
+            }
+          };
+        Thread t = new Thread(r);
+        t.start();
+        t.join();
+        System.out.println("main2");
+      }
+    }
+}
diff --git a/sources/jdk/test/sun/misc/Continuation/ContinuationTest5.java b/sources/jdk/test/sun/misc/Continuation/ContinuationTest5.java
new file mode 100644
index 0000000..db61601
--- /dev/null
+++ b/sources/jdk/test/sun/misc/Continuation/ContinuationTest5.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright 2010 Google, Inc.  All Rights Reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Sun designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Sun in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+import sun.misc.Continuation;
+
+/*
+ * Tests a simple continuation save/resume between two threads in a loop.
+ *
+ * The two threads do not synchronize via a join.
+ */
+public class ContinuationTest5 {
+
+    public static void main(String[] args) throws Exception {
+      for(int i = 0; i < 10; ++i) {
+        Object rv = Continuation.enter(
+            new Runnable() {
+                public void run() {
+                    System.out.println(ContinuationTestBase.gammon2(65000));
+                }
+            }, null);
+        System.out.println("main: " + rv);
+        final Continuation cont = (Continuation) rv;
+        System.out.println("cont: " + cont);
+        Runnable r = new Runnable() {
+            public void run() {
+                Object rv1 = Continuation.enter(
+                    new Runnable() {
+                        public void run() {
+                            cont.resume("resuming");
+                        }
+                    }, null);
+                System.out.println("thread end");
+            }
+          };
+        Thread t = new Thread(r);
+        t.start();
+        System.out.println("main2");
+      }
+    }
+}
diff --git a/sources/jdk/test/sun/misc/Continuation/ContinuationTest6.java b/sources/jdk/test/sun/misc/Continuation/ContinuationTest6.java
new file mode 100644
index 0000000..c796738
--- /dev/null
+++ b/sources/jdk/test/sun/misc/Continuation/ContinuationTest6.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright 2010 Google, Inc.  All Rights Reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Sun designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Sun in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+import sun.misc.Continuation;
+
+/*
+ * Tests a simple continuation save/resume between two threads in a loop.
+ *
+ * Deoptimization happen.
+ *
+ * The two threads do not synchronize via a join.
+ */
+public class ContinuationTest6 {
+
+    public static void main(String[] args) throws Exception {
+      for(int i = 0; i < 10; ++i) {
+        Object rv = Continuation.enter(
+            new Runnable() {
+                public void run() {
+                    System.out.println(ContinuationTestBase.gammon3(true));
+                }
+            }, null);
+        System.out.println("main: " + rv);
+        final Continuation cont = (Continuation) rv;
+        System.out.println("cont: " + cont);
+        ContinuationTestBase.gammon3(false); // induce deopt of gammon
+        Runnable r = new Runnable() {
+            public void run() {
+                Object rv1 = Continuation.enter(
+                    new Runnable() {
+                        public void run() {
+                            cont.resume("resuming");
+                        }
+                    }, null);
+                System.out.println("thread end");
+            }
+          };
+        Thread t = new Thread(r);
+        t.start();
+        System.out.println("main2");
+      }
+    }
+}
diff --git a/sources/jdk/test/sun/misc/Continuation/ContinuationTest7.java b/sources/jdk/test/sun/misc/Continuation/ContinuationTest7.java
new file mode 100644
index 0000000..95915e9
--- /dev/null
+++ b/sources/jdk/test/sun/misc/Continuation/ContinuationTest7.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright 2010 Google, Inc.  All Rights Reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Sun designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Sun in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+import sun.misc.Continuation;
+import java.util.concurrent.CountDownLatch;
+
+/*
+ * Tests a save-resume cycle in parallel.
+ */
+public class ContinuationTest7 {
+
+    public static void main(String[] args) throws Exception {
+        final int parallel = 2;
+        final CountDownLatch latch = new CountDownLatch(parallel);
+        for(int i = 0; i < parallel; ++i) {
+            Runnable r = new Runnable() {
+                public void run() {
+                    // Repeat the save-resume cycle 5 times
+                    for (int i = 0; i < 5; ++i) {
+                        ContinuationTestBase.gammon2(100);
+                    }
+                    latch.countDown();
+                }};
+            ContinuationTestBase.saveResumeCycle(r, null);
+        }
+        latch.await();
+        ContinuationTestBase.executor.shutdown();
+    }
+}
diff --git a/sources/jdk/test/sun/misc/Continuation/ContinuationTest8.java b/sources/jdk/test/sun/misc/Continuation/ContinuationTest8.java
new file mode 100644
index 0000000..b7e9773
--- /dev/null
+++ b/sources/jdk/test/sun/misc/Continuation/ContinuationTest8.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright 2010 Google, Inc.  All Rights Reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Sun designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Sun in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+import sun.misc.Continuation;
+import java.util.concurrent.CountDownLatch;
+
+/*
+ * Like ContinuationTest7 but with extra stack frames via recursion.
+ */
+public class ContinuationTest8 {
+
+    public static void main(String[] args) throws Exception {
+        final int parallel = 3000;
+        final CountDownLatch latch = new CountDownLatch(parallel);
+        for(int i = 0; i < parallel; ++i) {
+            Runnable r = new Runnable() {
+                public void run() {
+                    // Repeat the save-resume cycle 5 times
+                    for (int i = 0; i < 5; ++i) {
+                        ContinuationTestBase.gammon4(100);
+                    }
+                    latch.countDown();
+                }};
+            ContinuationTestBase.saveResumeCycle(r, null);
+        }
+        latch.await();
+        ContinuationTestBase.executor.shutdown();
+    }
+}
diff --git a/sources/jdk/test/sun/misc/Continuation/ContinuationTest9.java b/sources/jdk/test/sun/misc/Continuation/ContinuationTest9.java
new file mode 100644
index 0000000..231ebca
--- /dev/null
+++ b/sources/jdk/test/sun/misc/Continuation/ContinuationTest9.java
@@ -0,0 +1,180 @@
+/*
+ * Copyright 2010 Google, Inc.  All Rights Reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Sun designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Sun in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+import java.util.LinkedList;
+import sun.misc.Continuation;
+
+/*
+ * This class demonstrates the continuation feature by implementing a
+ * user-thread-like object.
+ */
+public class ContinuationTest9 {
+    private static int ITER = 10000;
+
+    public static void test() throws Exception {
+        Runnable r1 = new Runnable() {
+            public void run() {
+                while (true) {
+                    System.out.println("t1: " + counter++);
+                    UserThread.yield();
+                    if (counter > ITER) {
+                        return;
+                    }
+                }
+            }};
+        Runnable r2 = new Runnable() {
+        public void run() {
+            while (true) {
+                System.out.println("t2: " + counter++);
+                UserThread.yield();
+                if (counter > ITER) {
+                    return;
+                }
+            }
+        }};
+        UserThread t1 = new UserThread(r1);
+        UserThread t2 = new UserThread(r2);
+        t1.start();
+        t2.start();
+        UserThread.join();
+    }
+
+    private static int counter = 0;
+
+    public static void main(String[] args) throws Exception {
+      test();
+      System.exit(0);
+    }
+}
+
+class UserThread {
+    // The schedule queue
+    private static final LinkedList<UserThread> queue = new LinkedList<UserThread>();
+    // The currently scheduled UserThread
+    private static UserThread currentThread;
+    // Used to synchronize between the internal thread and the outside world
+    // This guards queue, nthreads and currentThread
+    private static final Object lock = new Object();
+    // The number of live UserThreads
+    private static int nthreads = 0;
+    // Lock for join
+    private static final Object awaitLock = new Object();
+
+    // The backing Java thread that executes
+    // all UserThreads
+    private static final Thread jthread =
+        new Thread(new Runnable() {
+            public void run() {
+                while (true) {
+                    try {
+                        UserThread ut_to_run;
+                        synchronized (lock) {
+                            if (queue.size() == 0) {
+                                // Wait if there's no user thread to schedule
+                                lock.wait();
+                            }
+                            // Get the user thread to be scheduled next
+                            ut_to_run = queue.remove();
+                            currentThread = ut_to_run;
+                        }
+                        final UserThread ut = ut_to_run;
+                        final Continuation c = ut.continuation;
+                        // If it's scheduled for the first time,
+                        if (c == null) {
+                            // simply execute the given Runnable in a scope
+                            Continuation.enter(ut.runnable, null);
+                        } else {
+                            // Otherwise, resume the saved continuation
+                            Runnable r = new Runnable() {
+                                public void run() {
+                                    c.resume(null);
+                                }};
+                            Continuation.enter(r, null);
+                        }
+                    } catch (Throwable t) {
+                        throw new RuntimeException(t);
+                    }
+                }
+            }
+          });
+
+    static {
+        jthread.start();
+    }
+
+    private final Runnable runnable;
+    private Continuation continuation;
+
+    public UserThread(final Runnable r) {
+        runnable = new Runnable() {
+            public void run() {
+                r.run();
+                UserThread.exit();
+            }
+          };
+    }
+
+    public void start() {
+        synchronized(lock) {
+            nthreads++;
+            // Add the given user thread to the schedule queue
+            queue.add(this);
+            // Notify the Java thread if it's waiting
+            lock.notify();
+        }
+    }
+
+    public static void yield() {
+        // Create a new continuation for each yield
+        final Continuation c = new Continuation();
+        synchronized (lock) {
+            // Save it in the user thread
+            currentThread.continuation = c;
+            // Put the user thread back to the schedule queue
+            queue.add(currentThread);
+        }
+        // Save the current scope into it. It will cause
+        // the enter at the bottom of the scope to return.
+        c.save();
+    }
+
+    private static void exit() {
+        int new_nthreads;
+        synchronized (lock) {
+            nthreads--;
+            new_nthreads = nthreads;
+            if (new_nthreads == 0) {
+                synchronized (awaitLock) {
+                    awaitLock.notify();
+                }
+            }
+        }
+    }
+
+    public static void join() throws InterruptedException {
+        synchronized (awaitLock) {
+            awaitLock.wait();
+        }
+    }
+}
diff --git a/sources/jdk/test/sun/misc/Continuation/ContinuationTestBase.java b/sources/jdk/test/sun/misc/Continuation/ContinuationTestBase.java
new file mode 100644
index 0000000..da990ab
--- /dev/null
+++ b/sources/jdk/test/sun/misc/Continuation/ContinuationTestBase.java
@@ -0,0 +1,225 @@
+/*
+ * Copyright 2010 Google, Inc.  All Rights Reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Sun designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Sun in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+import sun.misc.Continuation;
+import java.util.*;
+import java.util.concurrent.*;
+
+/*
+ * Shared code among the continuation tests.
+ */
+public class ContinuationTestBase {
+
+    static class A {
+        static int f = 0;
+    }
+
+    static String gammon1() {
+        String normally = "";
+        try {
+            System.out.println("ENTER gammon1");
+            String res = "gammon1+"+spinach(true);
+            normally = " NORMALLY";
+            return res;
+        } finally {
+            System.out.println("EXIT gammon1"+normally);
+        }
+    }
+
+    static String gammon2(final int iter) {
+        String normally = "";
+        try {
+            System.out.println("ENTER gammon2");
+            int s = 0;
+            String str = "";
+            for (int i = 0; i < iter; ++i) {
+                s = s ^ (i << 32) % 344;
+                if (s % 1000 == 0) {
+                    str += s;
+                }
+                if (i % 1000 == 0) {
+                    System.out.print(".");
+                }
+            }
+            String res = "gammon2+" + spinach(true);
+            System.out.println("after spinach.");
+            s = 0;
+            str = "";
+            for (int i = 0; i < iter; ++i) {
+                s = s ^ (i << 32) % 344;
+                if (s % 1000 == 0) {
+                    str += s;
+                }
+                if (i % 1000 == 0) {
+                    System.out.print(".");
+                }
+            }
+             normally = " NORMALLY" + str.hashCode();
+            return res;
+        } finally {
+            System.out.println("EXIT gammon2" + normally);
+        }
+    }
+
+    static String gammon3(boolean doSave) {
+        String normally = "";
+        try {
+            System.out.println("ENTER gammon3");
+            int s = 0;
+            String str = "";
+            for (int i = 0; i < 65000; ++i) {
+                s = s ^ (i << 32) % 344;
+                if (s % 1000 == 0) {
+                    str += s;
+                }
+                if (i % 1000 == 0) {
+                    System.out.print(".");
+                }
+            }
+            String res = "gammon3+" + spinach(doSave);
+            System.out.println("after spinach.");
+            s = doSave ? 0 : A.f; // induce deopt when doSave = false
+            str = "";
+            for (int i = 0; i < 65000; ++i) {
+                s = s ^ (i << 32) % 344;
+                if (s % 1000 == 0) {
+                    str += s;
+                }
+                if (i % 1000 == 0) {
+                    System.out.print(".");
+                }
+            }
+            normally = " NORMALLY" + str.hashCode();
+            return res;
+        } finally {
+            System.out.println("EXIT gammon3"+normally);
+        }
+    }
+
+    static String gammon4(final int iter) {
+        String normally = "";
+        try {
+            System.out.println("ENTER gammon4");
+            int s = 0;
+            String str = "";
+            for (int i = 0; i < iter; ++i) {
+                s = s ^ (i << 32) % 344;
+                if (s % 1000 == 0) {
+                    str += s;
+                }
+                if (i % 1000 == 0) {
+                    System.out.print(".");
+                }
+            }
+            String res = "gammon4+" + spinach2(true);
+            System.out.println("after spinach2.");
+            s = 0;
+            str = "";
+            for (int i = 0; i < iter; ++i) {
+                s = s ^ (i << 32) % 344;
+                if (s % 1000 == 0) {
+                    str += s;
+                }
+                if (i % 1000 == 0) {
+                    System.out.print(".");
+                }
+            }
+            normally = " NORMALLY" + str.hashCode();
+            return res;
+        } finally {
+            System.out.println("EXIT gammon4" + normally);
+        }
+    }
+
+    static String spinach(boolean doSave) {
+        String normally = "";
+        try {
+            System.out.println("ENTER spinach");
+            String res = "spinach+" + magic(doSave);
+            System.out.println("after magic.");
+            normally = " NORMALLY";
+            return res;
+        } finally {
+            System.out.println("EXIT spinach" + normally);
+        }
+    }
+
+    static String spinach2(boolean doSave) {
+        String normally = "";
+        try {
+            System.out.println("ENTER spinach2");
+            String res = "spinach2+" + recurse(doSave, 200);
+            System.out.println("after magic.");
+            normally = " NORMALLY";
+            return res;
+        } finally {
+            System.out.println("EXIT spinach" + normally);
+        }
+    }
+
+    static String recurse(boolean doSave, int n) {
+        if (n != 0) {
+            return recurse(doSave, n - 1);
+        }
+        return magic(doSave);
+    }
+
+    static String magic(boolean doSave) {
+        if (!doSave) {
+            return "deopt";
+        }
+        Continuation cont = new Continuation();
+        Object rv = cont.save();
+        System.out.println("Just resumed.");
+        rv = toString(rv);
+        System.out.println("save rv="+rv);
+        return rv.toString();
+    }
+
+    static String toString(Object x) {
+        if (x == null)  return "null";
+        if (x instanceof Object[])
+            return Arrays.deepToString((Object[])x);
+        return x.toString();
+    }
+
+    static ExecutorService executor = Executors.newFixedThreadPool(2);
+
+    // A helper for repeating the save-resume cycle
+    static void saveResumeCycle(final Runnable task,
+                                final Object return_value) {
+        Runnable r = new Runnable() {
+            public void run() {
+                final Continuation c = (Continuation) Continuation.enter(task, executor);
+                if (c != null) {
+                    Runnable resumer = new Runnable() {
+                        public void run() {
+                            c.resume(return_value);
+                        }};
+                    saveResumeCycle(resumer, return_value);
+                }
+            }};
+        executor.execute(r);
+    }
+}
diff --git a/sources/jdk/test/sun/misc/Continuation/run_all_tests.sh b/sources/jdk/test/sun/misc/Continuation/run_all_tests.sh
new file mode 100644
index 0000000..660ff20
--- /dev/null
+++ b/sources/jdk/test/sun/misc/Continuation/run_all_tests.sh
@@ -0,0 +1,37 @@
+#!/bin/sh
+#
+# Run all the continuation tests with different combinations of the compilers and GCs.
+
+if [ -z $JAVABIN ]
+then
+  echo "JAVABIN is unset. Set it to the java launcher. Abort."
+  exit -1
+fi
+
+DATE=`date +'%F_%T' | sed 's/\-/_/g' | sed 's/\:/_/g'`
+
+COMMON_JVM_FLAGS=""
+JVM_FLAGS_LIST="-Xint -client -server -client_-Xcomp -server_-Xcomp -server_-XX:+UseParallelGC -server_-XX:+UseConcMarkSweepGC -client_-XX:+UseParallelGC -client_-XX:+UseConcMarkSweepGC"
+
+mkdir -p logs
+mkdir -p logs/$DATE
+NTESTS=9
+
+for i in `seq 1 $NTESTS`
+do
+  TEST=ContinuationTest$i
+  echo "Running $TEST..."
+  for f in $JVM_FLAGS_LIST
+  do
+    JVM_FLAGS=`echo $f | sed 's/_/ /g'`
+    JVM_FLAGS_LABEL=`echo $f | sed 's/-/_/g'`
+    for k in `seq 1 3`
+    do
+      LABEL=$TEST-$JVM_FLAGS_LABEL-$k
+      LOG=logs/$DATE/log-$LABEL.txt
+      COMMAND="$JAVABIN $COMMON_JVM_FLAGS $JVM_FLAGS $TEST"
+      echo "Executing $COMMAND"
+      $COMMAND > $LOG 2>&1 || echo "Test $LABEL failed. The log is in $LOG"
+    done
+  done
+done
diff --git a/sources/langtools/.hg/dirstate b/sources/langtools/.hg/dirstate
index 04e47daba9a295461c4abc27bc0e6fe560bb3b4b..f4779c08694f9dae4770d9d53d0b0e47a2ad63f7 100644
GIT binary patch
delta 17878
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
X<?U?sV-&jK5N#cWtNXiHbJ_m^g~=;D

delta 13673
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
Ee?~Q$HUIzs

-- 
1.7.0.4

